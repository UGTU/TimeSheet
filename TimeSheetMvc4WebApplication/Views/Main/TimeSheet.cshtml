@model TimeSheetMvc4WebApplication.ClassesDTO.DtoTimeSheet

@{
    ViewBag.Title = "TimeSheet";
    Layout = "~/Views/Shared/TimeSheetLayout.cshtml";
}

<div class="row" ng-app>
    <div class="col-md-4">
        <div id="employeeList" class="list-group" style=" overflow: auto; border: 1px solid #dddddd">
            @foreach (var empl in Model.Employees)
            {
                <a @*href="#"*@ class="list-group-item" data-idfactstaffhistiry="@empl.FactStaffEmployee.IdFactStaffHistiry">
                    <h4 class="list-group-item-heading">@string.Format("{0} {1} {2}", empl.FactStaffEmployee.Surname, empl.FactStaffEmployee.Name, empl.FactStaffEmployee.Patronymic)</h4>
                    <p class="list-group-item-text">@string.Format("{0:0.00} ст., {1}", empl.FactStaffEmployee.StaffRate, empl.FactStaffEmployee.Post.PostSmallName)</p>
                </a>
            }
        </div>
    </div>
    <div class="col-md-8" ng-controller="TimeSheetRecords">

        <li ng-repeat="record in records">
            <input type="text" ng-model="record.Date" />
            <input type="text" ng-model="record.DayAweek" />
            <input type="text" ng-model="record.DayStays.SmallDayStatusName" />
            <input type="text" ng-model="record.JobTimeCount" />
        </li>



    </div>
</div>

<script>
    $('.list-group-item').click(function () {
        //employeeListResize();
        $('.list-group-item').removeClass('active');
        $(this).addClass('active');
        //загрузка данных
    });

    $(window).load(function () {
        employeeListResize();
    });

    $(window).resize(function () {
        employeeListResize();
    });

    function employeeListResize() {
        var maxHeight = $(window).height();
        maxHeight = maxHeight - 90;
        //alert(maxHeight);
        $('#employeeList').css('max-height', maxHeight);
    }
</script>

<script>
    function TimeSheetRecords($scope, $http) {
        var master = null;

        $http.get('@Html.Raw(@Url.Action("GetEmployeeRecordsForTimeSheet", "Main", new { idTimeSheet = 544, idFactStaffHistory = @Model.Employees.First().FactStaffEmployee.IdFactStaffHistiry }))').success(function (data) {
            $scope.records = data;
            master = angular.copy(data);
            $scope.etalon = data[0];
        });

        $scope.ctrlKey = false;
        $scope.leftMouseBtnDown = false;

        $scope.state = /^\w\w$/;

        $scope.zip = /^\d\d\d\d\d$/;

        $scope.chckedIndexs = [];

        $scope.cancel = function () {
            $scope.form = angular.copy(master);
        };

        @*$scope.save = function () {
            master = $scope.form;
            $http.post('@Url.Action("PutPhones")', $scope.form);
            $scope.cancel();
        };*@

        $scope.addContact = function () {
            $scope.form.contacts.push({ type: '', value: '' });
        };

        $scope.removeContact = function (contact) {
            var contacts = $scope.form.contacts;
            for (var i = 0, ii = contacts.length; i < ii; i++) {
                if (contact === contacts[i]) {
                    contacts.splice(i, 1);
                }
            }
        };

        $scope.isCancelDisabled = function () {
            return angular.equals(master, $scope.form);
        };

        $scope.isSaveDisabled = function () {
            return $scope.myForm.$invalid || angular.equals(master, $scope.form);
        };

        $scope.cancel();

        $scope.checkedIndex = function (phone) {
            if ($scope.chckedIndexs.indexOf(phone) === -1) {
                $scope.chckedIndexs.push(phone);
            } else {
                $scope.chckedIndexs.splice($scope.chckedIndexs.indexOf(phone), 1);
            }
        };

        $scope.update = function () {
            angular.forEach($scope.chckedIndexs, function (value) {
                value.Name = $scope.etName;
                value.Snippet = $scope.etSnippet;
            });
        };

        //$scope.checkedIndex = function (phone) {
        //    if ($scope.chckedIndexs.indexOf(phone) === -1) {
        //        $scope.chckedIndexs.push(phone);
        //    } else {
        //        $scope.chckedIndexs.splice($scope.chckedIndexs.indexOf(phone), 1);
        //    }
        //};

        $scope.handleKeyDown = function ($event) {
            if ($event.keyCode == 17) {
                $scope.ctrlKey = true;
            }
        };

        $scope.handleKeyUp = function ($event) {;
            if ($event.keyCode == 17) {
                $scope.ctrlKey = false;
            }
        };

        $scope.checkedIndex = function (phone) {
            phone.IsChecked = true;
            phone.Color = "red";
            $scope.chckedIndexs.push(phone);
        };

        $scope.unCheckedIndex = function (phone) {
            phone.IsChecked = false;
            phone.Color = "none";
            $scope.chckedIndexs.splice($scope.chckedIndexs.indexOf(phone), 1);
        };

        $scope.unCheckedIndexAll = function () {
            var len = $scope.chckedIndexs.length;
            for (var i = 0; i < len; i++) {
                $scope.unCheckedIndex($scope.chckedIndexs[0]);
            }
        };

        $scope.checkedIndexClick = function (phone) {
            if (phone.IsChecked) {
                if (!$scope.ctrlKey) { $scope.unCheckedIndexAll(); }
                else { $scope.unCheckedIndex(phone); }
            } else {
                console.log($scope.ctrlKey);
                if (!$scope.ctrlKey) { $scope.unCheckedIndexAll(); }
                $scope.checkedIndex(phone);
            }
        };


        $scope.checkedIndexMouseEnter = function (phone) {
            if ($scope.leftMouseBtnDown) {
                //$scope.checkedIndex(phone);
                if (phone.IsChecked) {
                    $scope.unCheckedIndex(phone);
                } else {
                    console.log($scope.ctrlKey);
                    $scope.checkedIndex(phone);
                }
            }
        };


    }
</script>