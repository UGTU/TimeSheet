@using TimeSheetMvc4WebApplication.Models
@model int

@{
    ViewBag.Title = "Редактирование";
    Layout = "~/Views/Shared/TimeSheetLayout.cshtml";
}

<div class="row" id="progress" style="margin-top: 20%;">
    <div class="col-md-offset-3 col-md-6">
        <div class="progress progress-striped active">
            <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
            </div>
        </div>
    </div>
</div>

<div class="row hidden" ng-app ng-controller="TimeSheetRecords">
    <div class="col-md-4">
        <div class="input-group input-group-sm" style="margin-bottom: 10px;">
            <input type="text" ng-model="query" class="form-control ">
            <span class="input-group-addon">
                <span class="glyphicon glyphicon-search"></span>
            </span>
        </div>

        <div id="employeeList" class="list-group" style=" overflow: auto; border: 1px solid #dddddd">
            <a class="list-group-item" style="cursor: pointer;padding: 7px 10px;" ng-repeat="empl in employees| filter:query" ng-click="setCurrentEmployeeRecords(empl)" ng-class="empl.css">
                <h4 class=" list-group-item-heading" style="font-size: 16px;">
                    {{empl.Surname}} {{empl.Name}} {{empl.Patronymic}}
                </h4>
                <p class="list-group-item-text">{{empl.StaffRate}} ст. {{empl.Post.PostSmallName}}</p>
            </a>
        </div>
    </div>
    <div class="col-md-8">
        <h3 style="margin-top: 0; padding-left: 15px;">
            {{currentEmployee.Surname}} {{currentEmployee.Name}} {{currentEmployee.Patronymic}}
            <small>Ставка: {{currentEmployee.StaffRate}}, должность: {{currentEmployee.Post.PostSmallName}} </small>
        </h3>
        <div class="col-md-7">

            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th style="width: 30px;"><input type="checkbox" ng-model="selectAll" @*ng-click="checkAllRecord()"*@ ng-disabled="isCanTimeSheetEditfunction()"></th>
                        <th>Дата</th>
                        <th align="center">День недели</th>
                        <th>Статус</th>
                        <th align="center">Дневные часы</th>
                        <th ng-class="SheduleCSS()" align="center">Ночные часы</th>
                    </tr>
                </thead>
                <tbody>
                    <tr ng-repeat="record in currentEmployee.Records| orderBy:Order" ng-class="RecorsState(record)" style="max-height: 10px;" @*class="success"*@>
                        <td style="padding: 0px; " align="center"><input type="checkbox" ng-model="record.IsCheked" ng-disabled="isCanTimeSheetEditfunction()" @*ng-click="checkRecordClick(record)"*@></td>
                        <td style="padding: 0px 5px;">{{record.Date}}</td>
                        <td style="padding: 0px;" align="center">{{record.DayAweek}}</td>
                        <td style="padding: 0px 5px; width: 70px;" align="center">
                            <select class="form-control input-sm" ng-model="record.DayStays" style="margin: 2px; padding: 0; height: 18px; width: 50px;" ng-options="dayStatus as getDayStatusName(dayStatus) for dayStatus in dayStatList" ng-disabled="isCanTimeSheetEditfunction()"></select>
                        </td>
                        <td style="padding: 0px 0px 0 5px; width: 75px;" align="center">
                            <div class="form-group " ng-class="inputJobTimeCountValidate(record.JobTimeCount)" style="margin-bottom: 0;">
                                <input class="form-control input-sm" ng-model="record.JobTimeCount" type="number" style="margin: 2px; padding: 0px 5px; height: 18px; width: 55px;" ng-disabled="isCanTimeSheetEditfunction()">
                            </div>
                        </td>
                        <td ng-class="SheduleCSS()" style="padding: 0px 0px 0 5px; width: 75px;" align="center">
                            <div class="form-group ">
                                <input class="form-control input-sm" ng-model="record.NightTimeCount" type="number" style="margin: 2px; padding: 0px 5px; height: 18px; width: 55px;" ng-disabled="NotNightShedule()">
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-md-5">

            <p style="margin-bottom: 0px;margin-top: 10px;">
                <label class=" control-label">Статус дня</label>
            </p>
            <p>
                <select class="form-control input-sm" ng-model="selectedDayStatList" ng-options="dayStatus as getDayStatusName(dayStatus) for dayStatus in dayStatList" ng-disabled="isUpdateDisabled()"></select>
            </p>
            <p style="margin-bottom: 0px;">
                <label class=" control-label">
                    Дневные часы
                </label>
            </p>
            <p>
                <input class="form-control input-sm" type="number" ng-model="selectedDayJobTimeCount" ng-disabled="isUpdateDisabled()">
            </p>

            <p style="margin-bottom: 0px;" ng-class="SheduleCSS()">
                <label class=" control-label">
                    Ночные часы
                </label>
            </p>
            <p ng-class="SheduleCSS()">
                <input class="form-control input-sm" type="number" ng-model="selectedNightJobTimeCount" ng-disabled="isUpdateDisabled()">
            </p>

            <p class="text-right">
                <button type="button" class="btn btn-default btn-sm" style="width: 100%;" ng-click="updateRecords()" ng-disabled="isUpdateDisabled()">
                    <span class="glyphicon glyphicon-ok"></span>
                    Применить к выбранным записям
                </button>
            </p>
            
            <p class="text-right" >
                <button @*ng-bind-html="copyAndPastRecordText"*@ type="button" class="btn btn-default btn-sm" style="width: 100%;" ng-click="copyAndPastRecords()" ng-disabled="iscopyAndPastRecordsDisabled()">
                    {{copyAndPastRecordText}}
                </button>
            </p>

            <p class="text-right">
                <button type="button" class="btn btn-default btn-sm" style="width: 100%;" ng-click="saveChanges()" ng-disabled="isSaveDisabled()">
                    <span class="glyphicon glyphicon-floppy-saved"></span>
                    Сохранить изменения
                </button>
            </p>
            <span class="divider"></span>
            <p class="text-right">
                <button type="button" class="btn btn-default btn-sm" style="width: 100%;" ng-click="remakeTsAdvance()" ng-disabled="isTSmakeAdvanceDis()" data-toggle="tooltip" data-placement="bottom" title="Табель заполненный только до 15 числа">
                    <!--<span class="glyphicon glyphicon-floppy-saved"></span>-->
                    Сделать табель для аванса
                </button>
            </p>

            <br/>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" data-parent="#accordion" href="#dayStatList" style="font-size: 14px;">
                            <span class="glyphicon glyphicon-list"></span> Расшифровка статусов дней
                        </a>
                    </h4>
                </div>
                <div id="dayStatList" class="panel-collapse collapse" style="overflow: auto;">
                    <div class="panel-body" style="padding: 0px; overflow: auto;">
                        <table class="table table-condensed table-striped">
                            <tr ng-repeat="dayStat in dayStatList">
                                <td>{{dayStat.SmallDayStatusName}}</td>
                                <td>{{dayStat.FullDayStatusName}}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@{
    Html.RenderPartial("HeaderLinks", new HeaderLinckModel
    {
        Links = new HeaderLink[] {HeaderLink.Edit, HeaderLink.Show,HeaderLink.Pdf,HeaderLink.Approve },
        CurrentLink = HeaderLink.Edit,
        IdTimeSheet = Model
    });
}

<script>
    $(window).load(function() {
        employeeListResize();
    });
    $(window).resize(function() {
        employeeListResize();
    });

    function employeeListResize() {
        var maxHeight = $(document).height();
        maxHeight = maxHeight - 170;
        $('#employeeList').css('max-height', maxHeight);
        maxHeight = maxHeight - 280;
        $('#dayStatList').css('max-height', maxHeight);
    }

    $(document).ready(function () {
        $(".footer").remove();
        $("[data-toggle='tooltip']").tooltip();
    });
</script>

<script>
   
    function TimeSheetRecords($scope, $http) {
        $http.get('@Html.Raw(@Url.Action("GetTimeSheetModelJson", "Main", new { idTimeSheet = @Model }))').success(function (data) {
            $scope.dayStatList = data.DayStatusList;
            $scope.ClearFields();
            $scope.employees = data.TimeSheet.Employees;
            $scope.selectAll = false;
            $scope.TimeSheetApproveStep = data.TimeSheet.TimeSheetApproveStep;
            $scope.RecodsForCopy = [];
            angular.forEach($scope.employees, function (empl) {
                angular.forEach(empl.Records, function (rec) {
                    angular.forEach($scope.dayStatList, function (ds) {
                        if (ds.IdDayStatus == rec.IdDayStatus) {
                            rec.DayStays = ds;
                        }
                    });
                });
            });


            $scope.setCurrentEmployeeRecords($scope.employees[0]);
            $('#progress').hide();
            $('.row').removeClass('hidden');
        });


        $scope.$watch('selectAll', function() {
            if (typeof $scope.currentEmployee != 'undefined') {
                angular.forEach($scope.currentEmployee.Records, function(empl) {
                    empl.IsCheked = $scope.selectAll;
                });
            }
        });

        $scope.ClearFields = function() {
            $scope.selectedDayStatList = $scope.dayStatList[0];
            $scope.selectedDayJobTimeCount = 0;
            $scope.selectedNightJobTimeCount = 0;
        }
        

        $scope.setCurrentEmployeeRecords = function (employee) {
            if ($scope.currentEmployee != null) {
                $scope.selectAll = false;
                if (!$scope.isSaveDisabled() && confirm('Сохранить внесённые изменения для табеля сотрудника?')) {
                    // Save it!
                    $scope.saveChanges();
                }
                else {
                    // Do nothing!
                    $scope.returnEmployeesRecordsToStandart();
                }   
            }
            $scope.currentEmployee = employee;
            angular.forEach($scope.employees, function (empl) {
                empl.css = '';
            });
            employee.css = 'active';
            $scope.employeesRecordsStandard = angular.copy($scope.currentEmployee.Records);
        };

        $scope.remakeTsAdvance = function () { 
            var message = 'Вы уверены что хотите сделать табель авансовым? \nЭто действие каснется для всех сотрудников в текущем табеле.';
            if (confirm(message)) {

                var link = '@Url.Action("remakeTimeSheetAdvance", "Main", new { idTimeSheet = @Model})';
                $('.row').addClass('hidden');
                $('#progress').removeClass('hidden').show();
                $.post(link).success(
                    function (result) {
                        if (result.Result) {
                            console.log('remakeTsAdvance ');
                        } else {
                            $('#progress').hide();
                            $('.row').removeClass('hidden');
                            alert(result.Message);
                        }
                        location.reload(true);
                    }
                );
            }
        };

        $scope.saveChanges = function () {
            if ($scope.currentEmployee == null) return;
            var employee = $scope.currentEmployee;
            var employeesRecordsStandard = $scope.employeesRecordsStandard;

            var changes = [];
            angular.forEach(employee.Records, function (record) {
                angular.forEach(employeesRecordsStandard, function (recordStandard) {
                    if (record.Date == recordStandard.Date & (record.JobTimeCount != recordStandard.JobTimeCount |
                        record.NightTimeCount != recordStandard.NightTimeCount |
                        record.DayStays.IdDayStatus != recordStandard.DayStays.IdDayStatus)) {
                        changes.push(record);
                        console.log('######################################################################');
                        console.log(record.JobTimeCount + ' ' + record.NightTimeCount + ' ' + record.DayStays.IdDayStatus);
                        console.log(recordStandard.JobTimeCount + ' ' + recordStandard.NightTimeCount + ' ' + recordStandard.DayStays.IdDayStatus);
                        console.log('######################################################################');
                    }
                });
            });
            if (changes.length > 0) {
                console.log('save ' + changes.length + ' records');
                angular.forEach(changes, function (ch) {
                    ch.IdDayStatus = ch.DayStays.IdDayStatus;
                });
                //отправить данные на сервер
                $http.post('@Url.Action("UpdateTimeSheetRecotds")', changes).success(
                    function (result) {
                        if (result.Result) {
                            console.log('save records succes');
                            $scope.isTSmakeAdvanceDis = false;
                            $scope.employeesRecordsStandard = angular.copy($scope.currentEmployee.Records);
                        } else {
                            alert(result.Message);
                            $scope.returnEmployeesRecordsToStandart();
                        }
                    }
                );
            }
        };

        $scope.returnEmployeesRecordsToStandart = function () {
            $scope.currentEmployee.Records = angular.copy($scope.employeesRecordsStandard);
            angular.forEach($scope.currentEmployee.Records, function (rec) {
                angular.forEach($scope.dayStatList, function (ds) {
                    if (ds.IdDayStatus == rec.IdDayStatus) {
                        rec.DayStays = ds;
                    }
                });
            });
        };

        $scope.isSaveDisabled = function () {
            if ($scope.currentEmployee == null) return false;
            var changes = [];
            angular.forEach($scope.currentEmployee.Records, function (record) {
                angular.forEach($scope.employeesRecordsStandard, function (recordStandard) {
                    if (record.Date == recordStandard.Date & (record.JobTimeCount != recordStandard.JobTimeCount
                        | record.NightTimeCount != recordStandard.NightTimeCount
                        | record.DayStays.IdDayStatus != recordStandard.DayStays.IdDayStatus)) {
                        changes.push(record);
                    }
                });
            });
            if (changes.length > 0) {
                return false;
            }
            return true;
        };

        $scope.getDayStatusName = function (dayStatus) {
            return dayStatus.SmallDayStatusName;
        };

        $scope.updateRecords = function () {
            angular.forEach($scope.currentEmployee.Records, function (record) {
                if (record.IsCheked) {
                    console.log('update record');
                    record.DayStays = $scope.selectedDayStatList;
                    record.JobTimeCount = $scope.selectedDayJobTimeCount;
                    record.NightTimeCount = $scope.selectedNightJobTimeCount;
                    //record.JobTimeCount = 5;
                    record.IsCheked = false;
                }
            });
            $scope.ClearFields();
        };
        
        $scope.isCanTimeSheetEditfunction = function () {
            if ($scope.TimeSheetApproveStep == 0) return false;
            return true;
        };
        $scope.isTSmakeAdvanceDis = function () {
            //$scope.isUpdateDisabled and isSaveDisabled
            var isDis = true;
            if ($scope.isSaveDisabled) {
                isDis = false;
            }
            if ($scope.isUpdateDisabled) {
                isDis = true;
            }

            return isDis;
            //if ($scope.currentEmployee == null) return false;
            //var changes = [];
            //angular.forEach($scope.currentEmployee.Records, function (record) {
            //    angular.forEach($scope.employeesRecordsStandard, function (recordStandard) {
            //        if (record.Date == recordStandard.Date & (record.JobTimeCount != recordStandard.JobTimeCount
            //            | record.NightTimeCount != recordStandard.NightTimeCount
            //            | record.DayStays.IdDayStatus != recordStandard.DayStays.IdDayStatus)) {
            //            changes.push(record);
            //        }
            //    });
            //});
            //if (changes.length > 0) {
            //    return true;
            //}
            //return false;
        };
        $scope.NotNightShedule = function () {
            if ($scope.currentEmployee == null) return true;
            return (!$scope.currentEmployee.WorkShedule.AllowNight);
        };

        $scope.isUpdateDisabled = function () {
            if ($scope.currentEmployee == null) return true;
            var result = true;
            angular.forEach($scope.currentEmployee.Records, function (record) {
                if (record.IsCheked) {
                    console.log('update enable');
                    result = false;
                }
            });
            return result;
        };

        //=========================
        $scope.copyAndPastRecords = function () {
            if (!$scope.isUpdateDisabled()){
                $scope.copy();
                return;
            }
            $scope.paste();
        };

        //$scope.iscopyAndPastRecordsDisabled = function () {
        //    if (typeof $scope.RecodsForCopy == 'undefined') {
        //        $scope.copyAndPastRecordText = 'Копировать';
        //        console.log("1");
        //        return true;
        //    }
        //    if (!$scope.isUpdateDisabled()) {
        //        $scope.copyAndPastRecordText = 'Копировать';
        //        console.log("2");
        //        return false;
        //    }
        //    if ($scope.isUpdateDisabled()) {
        //        console.log($scope.RecodsForCopy.length);
        //        if ($scope.RecodsForCopy.length > 0 && $scope.canCopyAndPastRecord()) {
        //            $scope.copyAndPastRecordText = 'Вставить';
        //            console.log("3");
        //            return false;
        //        } else {
        //            $scope.copyAndPastRecordText = 'Вставить';
        //            console.log("4");
        //            return true;
        //        }
        //    } else {
        //        if ($scope.RecodsForCopy.length > 0 & $scope.canCopyAndPastRecord()) {
        //            $scope.copyAndPastRecordText = 'Копировать';
        //            console.log("5");
        //            return false;
        //        } else {
        //            $scope.copyAndPastRecordText = 'Копировать';
        //            console.log("6");
        //            return true;
        //        }
        //    }
        //    $scope.copyAndPastRecordText = 'Копировать';
        //    console.log("5");
        //    return true;
        //};

        $scope.iscopyAndPastRecordsDisabled = function () {
            //var copyStr = "<span class=\"glyphicon glyphicon-search\"></span> Копировать";
            var copyStr = "Копировать";
            var pastStr = 'Вставить';
            if (typeof $scope.RecodsForCopy == 'undefined') {
                $scope.copyAndPastRecordText = copyStr;
                console.log("1");
                return true;
            }
            //if ($scope.isUpdateDisabled() & $scope.RecodsForCopy.length <= 0) {
            //    $scope.copyAndPastRecordText = 'Копировать';
            //    console.log("2");
            //    return true;
            //}
            if (!$scope.isUpdateDisabled()) {
                $scope.copyAndPastRecordText = copyStr;
                console.log("2");
                return false;
            } else {
                if ( $scope.RecodsForCopy.length <= 0) {
                    $scope.copyAndPastRecordText = copyStr;
                    console.log("3");
                    return true;
                }
                if ($scope.canCopyAndPastRecord()) {
                    $scope.copyAndPastRecordText = pastStr;
                    console.log("4");
                    return false;
                } else {
                    $scope.copyAndPastRecordText = pastStr;
                    console.log("5");
                    return true;
                }
            }

        };

        $scope.canCopyAndPastRecord = function () {
            var res = false;
            angular.forEach($scope.RecodsForCopy, function (record) {
                angular.forEach($scope.currentEmployee.Records, function (currenUserRecord) {
                    if (record.Date == currenUserRecord.Date) {
                        if (currenUserRecord.DayStays != record.DayStays |
                            currenUserRecord.JobTimeCount != record.JobTimeCount |
                            currenUserRecord.NightTimeCount != record.NightTimeCount)
                            res = true;
                        return;
                    }
                });
                if (res)return;
            });
            return res;
        }

        $scope.copy = function () {
            console.log('copy');
            $scope.RecodsForCopy = [];
            angular.forEach($scope.currentEmployee.Records, function (record) {
                if (record.IsCheked) {
                    //$scope.RecodsForCopy.push(angular.copy(record));
                    $scope.RecodsForCopy.push(record);
                    record.IsCheked = false;
                }
            });
        }

        $scope.paste = function () {
            console.log('past');
            angular.forEach($scope.RecodsForCopy, function (record) {
                angular.forEach($scope.currentEmployee.Records, function (currenUserRecord) {
                    if (record.Date == currenUserRecord.Date) {
                        currenUserRecord.DayStays = record.DayStays;
                        currenUserRecord.JobTimeCount = record.JobTimeCount;
                        currenUserRecord.NightTimeCount = record.NightTimeCount;
                    }
                });
            });
        }
        //=========================

        $scope.inputJobTimeCountValidate = function (jobTimeCount) {
            var r = parseFloat(jobTimeCount);
            if (isNaN(r) | r > 24) {
                return 'has-error';
            }
            if (r > 8) return 'has-warning';
            return '';
        };

        $scope.SheduleCSS = function () {
            if ($scope.NotNightShedule()) 
                return "invisible";
            return "visible";
        }

        $scope.RecorsState = function (record) {
            //var r = parseFloat(jobTimeCount);
            //if (isNaN(r) | r > 24) {
            //    return 'has-error';
            //}
            //if (r > 8) return 'has-warning';
            //console.log('sss');
            //return 'success';
            if (record.DayAweek == 'суббота') return 'weekEnd';
            if (record.DayAweek == 'воскресенье') return 'weekEnd';
            //return 'active';
            return '';
        };
    }
</script>

<style>
    .errorInput {
        background-color: papayawhip;
        border: 1px solid red;
    }

    .weekEnd {
        background-color: #f5f5f5;
    }
</style>
