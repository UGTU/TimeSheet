<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http</name>
  </assembly>
  <members>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий исключение.</summary>
      <returns>Запрос должен быть связан с экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" />, содержимое которого представляет собой сериализованное представление экземпляра <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="statusCode">Код состояния ответа.</param>
      <param name="exception">Исключение.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий сообщение об ошибке.</summary>
      <returns>Запрос должен быть связан с экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" />, содержимое которого представляет собой сериализованное представление экземпляра <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="statusCode">Код состояния ответа.</param>
      <param name="message">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий исключение с сообщением об ошибке.</summary>
      <returns>Запрос должен быть связан с экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" />, содержимое которого представляет собой сериализованное представление экземпляра <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="statusCode">Код состояния ответа.</param>
      <param name="message">Сообщение об ошибке.</param>
      <param name="exception">Исключение.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий ошибку.</summary>
      <returns>Запрос должен быть связан с экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" />, содержимое которого представляет собой сериализованное представление экземпляра <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="statusCode">Код состояния ответа.</param>
      <param name="error">Ошибка HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий ошибку в состоянии модели.</summary>
      <returns>Запрос должен быть связан с экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.<see cref="T:System.Net.Http.HttpResponseMessage" />, содержимое которого представляет собой сериализованное представление экземпляра <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="statusCode">Код состояния ответа.</param>
      <param name="modelState">Состояние модели.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="formatter">Модули форматирования типа мультимедиа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="formatter">Модули форматирования типа мультимедиа.</param>
      <param name="mediaType">Значение заголовка типа мультимедиа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="formatter">Модули форматирования типа мультимедиа.</param>
      <param name="mediaType">Тип мультимедиа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="mediaType">Значение заголовка типа мультимедиа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="mediaType">Тип мультимедиа.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
      <summary>Создает <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Инициализированный <see cref="T:System.Net.Http.HttpResponseMessage" />, связанный с указанным <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса, породившее это сообщение ответа.</param>
      <param name="statusCode">Код состояния HTTP-ответа.</param>
      <param name="value">Содержимое сообщения HTTP-ответа.</param>
      <param name="configuration">Конфигурация HTTP, содержащая средство разрешения зависимостей, используемое для разрешения служб.</param>
      <typeparam name="T">Тип сообщения HTTP-ответа.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
      <summary>Освобождает все отслеживаемые ресурсы, связанные с <paramref name="request" /> и добавленные через метод <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" />.</summary>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
      <summary>Получает текущий сертификат X.509 из указанного запроса HTTP.</summary>
      <returns>Текущий <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> или значение NULL, если сертификат недоступен.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
      <summary>Извлекает <see cref="T:System.Web.Http.HttpConfiguration" /> для указанного запроса.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> для указанного запроса.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
      <summary>Извлекает <see cref="T:System.Guid" />, который был назначен как идентификатор корреляции, связанный с указанным <paramref name="request" />.Значение будет создано и задано при первом вызове этого метода.</summary>
      <returns>Объект <see cref="T:System.Guid" />, представляющий идентификатор корреляции, связанный с запросом.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
      <summary>Извлекает <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> для указанного запроса или null, если данные недоступны.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> для указанного запроса или null, если данные недоступны.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
      <summary>Получает разобранную строку запроса в виде коллекции пар "ключ-значение".</summary>
      <returns>Строка запроса в виде коллекции пар "ключ-значение".</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Извлекает <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> для указанного запроса или null, если данные недоступны.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> для указанного запроса или null, если данные недоступны.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
      <summary>Извлекает <see cref="T:System.Threading.SynchronizationContext" /> для указанного запроса или null, если данные недоступны.</summary>
      <returns>
        <see cref="T:System.Threading.SynchronizationContext" /> для указанного запроса или null, если данные недоступны.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)">
      <summary>Получает экземпляр <see cref="T:System.Web.Http.Routing.UrlHelper" /> для текущего запроса HTTP.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Routing.UrlHelper" />, инициализированный для указанного запроса HTTP.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
      <summary>Добавляет данный <paramref name="resource" /> в список ресурсов, которые будут освобождены узлом после освобождения <paramref name="request" />.</summary>
      <param name="request">HTTP-запрос, управляющий жизненным циклом <paramref name="resource" />.</param>
      <param name="resource">Ресурс, освобождаемый вместе с <paramref name="request" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Net.Http.HttpResponseMessageExtensions">
      <summary>Представляет расширения сообщений для HTTP-ответа от операции ASP.NET.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
      <summary>Пытается получить значение содержимого для <see cref="T:System.Net.Http.HttpResponseMessageExtensions" />.</summary>
      <returns>Результат извлечения значения содержимого.</returns>
      <param name="response">Ответ операции.</param>
      <param name="value">Значение содержимого.</param>
      <typeparam name="T">Тип извлекаемого значения.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
      <summary>Предоставляет <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из расширений пути, представленных в <see cref="T:System.Uri" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Расширение, соответствующее mediaType. Это значение не может включать точки или подстановочные знаки.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, возвращаемое в случае успешного сопоставления uriPathExtension.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Расширение, соответствующее mediaType. Это значение не может включать точки или подстановочные знаки.</param>
      <param name="mediaType">Тип мультимедиа, возвращаемый в случае успешного сопоставления uriPathExtension.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Возвращает значение, указывающее, может ли этот экземпляр <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> предоставить <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> для <see cref="T:System.Uri" /> из запроса. </summary>
      <returns>Если этот экземпляр сопоставляется с расширением файла в запросе, возвращается значение 1,0, в противном случае — 0,0.</returns>
      <param name="request">Проверяемое <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
      <summary> Получает расширение пути <see cref="T:System.Uri" />. </summary>
      <returns>Расширение пути <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="F:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtensionKey">
      <summary>Ключ расширения пути <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="T:System.Web.Http.AcceptVerbsAttribute">
      <summary> Указывает, какие HTTP-методы поддерживает действие. </summary>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.Net.Http.HttpMethod)"></member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.Net.Http.HttpMethod[])"></member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String)"></member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.AcceptVerbsAttribute" />.</summary>
      <param name="methods">Методы HTTP, поддерживаемые действием.</param>
    </member>
    <member name="P:System.Web.Http.AcceptVerbsAttribute.HttpMethods">
      <summary>Получает методы HTTP, поддерживаемые действием.</summary>
    </member>
    <member name="T:System.Web.Http.ActionNameAttribute">
      <summary>Представляет атрибут, используемый для имени действия.</summary>
    </member>
    <member name="M:System.Web.Http.ActionNameAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ActionNameAttribute" />.</summary>
      <param name="name">Имя действия.</param>
    </member>
    <member name="P:System.Web.Http.ActionNameAttribute.Name">
      <summary>Получает или задает имя действия.</summary>
      <returns>Имя действия.</returns>
    </member>
    <member name="T:System.Web.Http.AllowAnonymousAttribute">
      <summary>Указывает, что <see cref="T:System.Web.Http.AuthorizeAttribute" /> пропускает действия и контроллеры при авторизации.</summary>
    </member>
    <member name="M:System.Web.Http.AllowAnonymousAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.AllowAnonymousAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.ApiController">
      <summary>Содержимое здесь не обновляется; не добавляйте сюда материал.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.#ctor"></member>
    <member name="M:System.Web.Http.ApiController.BadRequest">
      <summary>Создает <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.BadRequestResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.String)"></member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Создает <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> с заданным состоянием модели.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> с заданным состоянием модели.</returns>
      <param name="modelState">Состояние модели, добавляемое в сообщение об ошибке.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Configuration">
      <summary>Получает <see cref="HttpConfiguration" /> текущего ApiController.Используйте этот метод задания только для модульного тестирования.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Conflict"></member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
      <summary>Создает &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; с заданными значениями.</summary>
      <returns>&lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; с заданными значениями.</returns>
      <param name="statusCode">Код состояния HTTP для сообщения ответа.</param>
      <param name="value">Значение содержимого для согласования и форматирования в теле объекта.</param>
      <typeparam name="T">Тип содержимого в теле объекта.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Создает &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</returns>
      <param name="statusCode">Код состояния HTTP для сообщения ответа.</param>
      <param name="value">Значение содержимого для форматирования в теле объекта.</param>
      <param name="formatter">Модуль форматирования для форматирования содержимого.</param>
      <typeparam name="T">Тип содержимого в теле объекта.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Создает &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</returns>
      <param name="statusCode">Код состояния HTTP для сообщения ответа.</param>
      <param name="value">Значение содержимого для форматирования в теле объекта.</param>
      <param name="formatter">Модуль форматирования для форматирования содержимого.</param>
      <param name="mediaType"> Значение заголовка типа содержимого или &lt;see langword="null" /&gt;, чтобы модуль форматирования выбирал значение по умолчанию. </param>
      <typeparam name="T">Тип содержимого в теле объекта.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Создает &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</summary>
      <returns>&lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt; с заданными значениями.</returns>
      <param name="statusCode">Код состояния HTTP для сообщения ответа.</param>
      <param name="value">Значение содержимого для форматирования в теле объекта.</param>
      <param name="formatter">Модуль форматирования для форматирования содержимого.</param>
      <param name="mediaType">Значение заголовка Content-Type.</param>
      <typeparam name="T">Тип содержимого в теле объекта.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ControllerContext">
      <summary>Получает <see cref="HttpControllerContext" /> текущего ApiController.Используйте этот метод задания только для модульного тестирования.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose"></member>
    <member name="M:System.Web.Http.ApiController.Dispose(System.Boolean)"></member>
    <member name="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)"></member>
    <member name="M:System.Web.Http.ApiController.InternalServerError"></member>
    <member name="M:System.Web.Http.ApiController.InternalServerError(System.Exception)"></member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ModelState">
      <summary>Получает состояние модели после привязки модели.ModelState будет пустым до привязки модели.Заполняйте это свойство только для модульного тестирования.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.NotFound">
      <summary>Создает <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.NotFoundResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok"></member>
    <member name="M:System.Web.Http.ApiController.Ok``1(``0)">
      <summary>Создает <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> с заданными значениями.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> с заданными значениями.</returns>
      <typeparam name="T">Тип содержимого в теле объекта.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.Request">
      <summary>Получает <see cref="HttpRequestMessage" /> текущего ApiController.Используйте этот метод задания только для модульного тестирования.</summary>
    </member>
    <member name="P:System.Web.Http.ApiController.RequestContext"></member>
    <member name="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
      <summary>Создает <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> с заданным ответом.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> для указанного ответа.</returns>
      <param name="response">Сообщение ответа HTTP.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
      <summary>Создает <see cref="T:System.Web.Http.StatusCodeResult" /> с заданным кодом состояния.</summary>
      <returns>
        <see cref="T:System.Web.Http.StatusCodeResult" /> с заданным кодом состояния.</returns>
      <param name="status">Код состояния HTTP для сообщения ответа</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})"></member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])"></member>
    <member name="P:System.Web.Http.ApiController.Url">
      <summary>Получает экземпляр <see cref="UrlHelper" />, используемый при создании URL-адресов для других API.Используйте этот метод задания только для модульного тестирования.</summary>
    </member>
    <member name="P:System.Web.Http.ApiController.User">
      <summary>Возвращает текущего участника, связанного с этим запросом.</summary>
    </member>
    <member name="T:System.Web.Http.AuthorizeAttribute">
      <summary>Задает фильтр авторизации, проверяющий <see cref="T:System.Security.Principal.IPrincipal" /> у запроса.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.AuthorizeAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Обрабатывает запросы, не прошедшие авторизацию.</summary>
      <param name="actionContext">Контекст.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Указывает, авторизован ли заданный элемент управления.</summary>
      <returns>Значение true, если элемент авторизован. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Вызывается при авторизации действия.</summary>
      <param name="actionContext">Контекст.</param>
      <exception cref="T:System.ArgumentNullException">Параметр контекста имеет значение NULL.</exception>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
      <summary>Возвращает или задает авторизованные роли. </summary>
      <returns>Строка ролей. </returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
      <summary>Получает уникальный идентификатор этого атрибута.</summary>
      <returns>Уникальный идентификатор атрибута.</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Users">
      <summary>Получает или задает авторизованных пользователей. </summary>
      <returns>Строка пользователей. </returns>
    </member>
    <member name="T:System.Web.Http.DefaultRouteAttribute">
      <summary>Annotates a controller with a route template that applies to any actions within the controller that don't already have a route template.</summary>
    </member>
    <member name="M:System.Web.Http.DefaultRouteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.DefaultRouteAttribute" /> class.  </summary>
    </member>
    <member name="M:System.Web.Http.DefaultRouteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.DefaultRouteAttribute" /> class. </summary>
      <param name="routeTemplate">The route template for the controller.</param>
    </member>
    <member name="P:System.Web.Http.DefaultRouteAttribute.RouteTemplate">
      <summary>Gets the route template describing the URI pattern to match against.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.FromBodyAttribute">
      <summary> Атрибут, который указывает, что параметр действия берется только из тела входящего объекта <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.FromBodyAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Получает привязку параметра.</summary>
      <returns>Привязка параметра.</returns>
      <param name="parameter">Описание параметра.</param>
    </member>
    <member name="T:System.Web.Http.FromUriAttribute">
      <summary>Атрибут, указывающий, что параметр действия извлекаются из URI входящего <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.FromUriAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Получает фабрики поставщиков значений для связывателя модели.</summary>
      <returns>Коллекция объектов <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="configuration">Конфигурация.</param>
    </member>
    <member name="T:System.Web.Http.HttpBindNeverAttribute">
      <summary>Представляет атрибуты, указывающие, что HTTP-привязка должна выполнить свойство.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindNeverAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpBindNeverAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpBindRequiredAttribute">
      <summary>Представляет обязательный атрибут для привязки HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindRequiredAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpBindRequiredAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpConfiguration">
      <summary>Представляет конфигурацию экземпляров <see cref="T:System.Web.Http.HttpServer" />. </summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpConfiguration" /> с помощью коллекции маршрутов HTTP.</summary>
      <param name="routes">Коллекция маршрутов HTTP, которую необходимо сопоставить с этим экземпляром.</param>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
      <summary>Получает или задает средство разрешения зависимостей, связанное с этим экземпляром.</summary>
      <returns>Сопоставитель зависимостей.</returns>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose">
      <summary>Выполняет определенные в приложении задачи, связанные с освобождением или сбросом неуправляемых ресурсов.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.EnsureInitialized"></member>
    <member name="P:System.Web.Http.HttpConfiguration.Filters">
      <summary>Получает список фильтров, которые применяются ко всем запросам, обрабатываемым с помощью этого экземпляра <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>Список фильтров.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Formatters">
      <summary>Получает модули форматирования мультимедиа данного экземпляра.</summary>
      <returns>Коллекция объектов <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
      <summary>Получает или задает значение, указывающее, будут ли сведения об ошибках включаться в сообщения об ошибках.</summary>
      <returns>Значение <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />, которое задает политику для сведений об ошибках.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Initializer">
      <summary> Получает или задает действие, которое будет выполнять окончательную инициализацию экземпляра <see cref="T:System.Web.Http.HttpConfiguration" />, прежде чем он будет использован для обработки запросов. </summary>
      <returns>Действие, которое будет выполнять окончательную инициализацию экземпляра <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
      <summary>Получает упорядоченный список экземпляров <see cref="T:System.Net.Http.DelegatingHandler" />, вызываемых в ходе прохода <see cref="T:System.Net.Http.HttpRequestMessage" /> вверх по стеку и обратного прохода <see cref="T:System.Net.Http.HttpResponseMessage" /> вниз по стеку. </summary>
      <returns>Коллекция обработчиков сообщений.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
      <summary>Получает коллекцию правил привязки параметров.</summary>
      <returns>Коллекция функций, которые могут создать привязку параметра для заданного параметра.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Properties">
      <summary>Получает свойства, связанные с этим экземпляром.</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />, содержащий свойства.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Routes">
      <summary>Получает <see cref="T:System.Web.Http.HttpRouteCollection" />, связанную с этим экземпляром <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpRouteCollection" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Services">
      <summary>Получает контейнер служб по умолчанию, связанный с этим экземпляром.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" />, который содержит службы по умолчанию для данного экземпляра.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
      <summary>Получает корень виртуального пути.</summary>
      <returns>Корень виртуального пути.</returns>
    </member>
    <member name="T:System.Web.Http.HttpConfigurationExtensions">
      <summary>Содержимое здесь не обновляется; не добавляйте сюда материал.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Регистрирует данный тип параметра в действии для привязки с помощью связывателя модели.</summary>
      <param name="configuration">Обновляемая конфигурация.</param>
      <param name="type">Тип параметра, к которому применяется связыватель.</param>
      <param name="binder">Связыватель модели.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)">
      <summary> Сопоставляет маршруты с определенными атрибутами для приложения. </summary>
      <param name="configuration">Конфигурация сервера.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.HttpRouteBuilder)">
      <summary> Сопоставляет маршруты с определенными атрибутами для приложения. </summary>
      <param name="configuration">Конфигурация сервера.</param>
      <param name="routeBuilder">
        <see cref="T:System.Web.Http.Routing.HttpRouteBuilder" /> для генерации маршрутов с атрибутами.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)">
      <summary>Позволяет подавлять операции субъекта узла.</summary>
      <param name="configuration">Конфигурация сервера.</param>
    </member>
    <member name="T:System.Web.Http.HttpDeleteAttribute">
      <summary>Указывает, что действие поддерживает HTTP-метод DELETE.</summary>
    </member>
    <member name="M:System.Web.Http.HttpDeleteAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpDeleteAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpError">
      <summary>Определяет сериализуемый контейнер для хранения сведений об ошибках.Данная информация хранится в виде пар ключ/значение.Ключи словаря для поиска сведений о стандартных ошибках доступны на <see cref="T:System.Web.Http.HttpErrorKeys" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpError" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpError" /> для <paramref name="exception" />.</summary>
      <param name="exception">Исключение, используемое для передачи сведений об ошибке.</param>
      <param name="includeErrorDetail">Значение true, чтобы включить сведения об исключении в сообщение об ошибке. В противном случае — значение false.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpError" />, содержащий сообщение об ошибке <paramref name="message" />.</summary>
      <param name="message">Сообщение об ошибке, связываемое с этим экземпляром.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpError" /> для <paramref name="modelState" />.</summary>
      <param name="modelState">Состояние недопустимой модели, используемое для передачи сведений об ошибке.</param>
      <param name="includeErrorDetail">Значение true, чтобы включить сообщения об исключениях в сообщение об ошибке. В противном случае — значение false.</param>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionMessage">
      <summary> Сообщение <see cref="T:System.Exception" />, если доступно. </summary>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionType">
      <summary> Тип <see cref="T:System.Exception" />, если доступно. </summary>
    </member>
    <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
      <summary> Получает определенное значение свойства от данного экземпляра ошибки. </summary>
      <param name="key">Имя свойства ошибки.</param>
      <typeparam name="TValue">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Web.Http.HttpError.InnerException">
      <summary> Внутреннее <see cref="T:System.Exception" />, связанное с этим экземпляром, если доступно. </summary>
    </member>
    <member name="P:System.Web.Http.HttpError.Message">
      <summary>Общее сообщение, отображаемое для пользователя, в котором описывается причина ошибки.Информация в этом поле считается открытой, так как передается по проводной сети, вне зависимости от <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />.Соответственно, следует соблюдать осторожность, чтобы не раскрыть конфиденциальные данные о сервере и приложении.</summary>
    </member>
    <member name="P:System.Web.Http.HttpError.MessageDetail">
      <summary> Подробное описание ошибки для того, чтобы разработчик мог точно понять, в чем проблема. </summary>
    </member>
    <member name="P:System.Web.Http.HttpError.ModelState">
      <summary>
        <see cref="P:System.Web.Http.HttpError.ModelState" />, содержащий сведения об ошибках, которые возникли во время привязки модели. </summary>
    </member>
    <member name="P:System.Web.Http.HttpError.StackTrace">
      <summary> Данные трассировки стека, связанные с этим экземпляром, если доступно. </summary>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#GetSchema"></member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)"></member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)"></member>
    <member name="T:System.Web.Http.HttpErrorKeys">
      <summary> Provides keys to look up error information stored in the <see cref="T:System.Web.Http.HttpError" /> dictionary. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ErrorCodeKey">
      <summary> Provides a key for the ErrorCode. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionMessageKey">
      <summary> Provides a key for the ExceptionMessage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionTypeKey">
      <summary> Provides a key for the ExceptionType. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.InnerExceptionKey">
      <summary> Provides a key for the InnerException. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageDetailKey">
      <summary> Provides a key for the MessageDetail. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageKey">
      <summary> Provides a key for the Message. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageLanguageKey">
      <summary> Provides a key for the MessageLanguage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ModelStateKey">
      <summary> Provides a key for the ModelState. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.StackTraceKey">
      <summary> Provides a key for the StackTrace. </summary>
    </member>
    <member name="T:System.Web.Http.HttpGetAttribute">
      <summary>Указывает, что действие поддерживает HTTP-метод GET.</summary>
    </member>
    <member name="M:System.Web.Http.HttpGetAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpGetAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpHeadAttribute">
      <summary> Указывает, что действие поддерживает HTTP-метод HEAD. </summary>
    </member>
    <member name="M:System.Web.Http.HttpHeadAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpHeadAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpOptionsAttribute">
      <summary> Указывает, что действие поддерживает HTTP-метод OPTIONS. </summary>
    </member>
    <member name="M:System.Web.Http.HttpOptionsAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpOptionsAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpPatchAttribute">
      <summary> Указывает, что действие поддерживает HTTP-метод PATCH. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPatchAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpPatchAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpPostAttribute">
      <summary>Указывает, что действие поддерживает HTTP-метод POST. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPostAttribute.#ctor"></member>
    <member name="T:System.Web.Http.HttpPutAttribute">
      <summary> Указывает, что действие поддерживает HTTP-метод PUT. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPutAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpPutAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpResponseException">
      <summary> Исключение, которое позволяет вернуть заданный <see cref="T:System.Net.Http.HttpResponseMessage" /> клиенту. </summary>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpResponseException" />.</summary>
      <param name="response">Ответ HTTP для возврата клиенту.</param>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpResponseException" />. </summary>
      <param name="statusCode">Код состояния ответа.</param>
    </member>
    <member name="P:System.Web.Http.HttpResponseException.Response">
      <summary>Получает ответ HTTP для возврата клиенту.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" />, представляющий ответ HTTP.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollection">
      <summary>Коллекция экземпляров <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
      <param name="virtualPathRoot">Корень виртуального пути.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Добавляет экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" /> в коллекцию.</summary>
      <param name="name">Имя маршрута.</param>
      <param name="route">Экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" /> для добавления в коллекцию.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
      <summary>Определяет, содержит ли коллекция указанный <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Значение true, если <see cref="T:System.Web.Http.Routing.IHttpRoute" /> найден в коллекции; в обратном случае — значение false.</returns>
      <param name="item">Объект, который требуется найти в коллекции.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ContainsKey(System.String)">
      <summary>Определяет, содержится ли в коллекции элемент с указанным ключом.</summary>
      <returns>Значение true, если коллекция содержит элемент с указанным ключом. В противном случае — значение false.</returns>
      <param name="name">Ключ, который требуется найти в коллекции.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
      <summary>Копирует экземпляры <see cref="T:System.Web.Http.Routing.IHttpRoute" /> из коллекции в массив, начиная с определенного индекса.</summary>
      <param name="array">Массив, куда копируются элементы из данной коллекции.</param>
      <param name="arrayIndex">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
      <summary>Копирует имена маршрутов и экземпляры <see cref="T:System.Web.Http.Routing.IHttpRoute" /> из коллекции в массив, начиная с определенного индекса.</summary>
      <param name="array">Массив, куда копируются элементы из данной коллекции.</param>
      <param name="arrayIndex">Значение нулевого индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Count">
      <summary>Получает количество элементов в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Создает экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий параметры маршрута по умолчанию.</param>
      <param name="constraints">Объект, который содержит ограничения маршрута.</param>
      <param name="dataTokens">Маркеры данных маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
      <summary>Создает экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий параметры маршрута по умолчанию.</param>
      <param name="constraints">Объект, который содержит ограничения маршрута.</param>
      <param name="dataTokens">Маркеры данных маршрута.</param>
      <param name="handler">Обработчик сообщений для маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Object,System.Object)">
      <summary>Создает экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий параметры маршрута по умолчанию.</param>
      <param name="constraints">Объект, который содержит ограничения маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose">
      <summary>Выполняет определенные в приложении задачи, связанные с освобождением или сбросом неуправляемых ресурсов.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Получает данные маршрута для указанного запроса HTTP.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Routing.IHttpRouteData" />, представляющий данные маршрута.</returns>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Получает виртуальный путь.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Routing.IHttpVirtualPathData" />, представляющий виртуальный путь.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="name">Имя маршрута.</param>
      <param name="values">Значения маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Вставляет в коллекцию экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <param name="index">Индекс (с нуля), по которому следует вставить значение параметра <paramref name="value" />.</param>
      <param name="name">Имя маршрута.</param>
      <param name="value">Вставляемый <see cref="T:System.Web.Http.Routing.IHttpRoute" />.Значение не может быть равно NULL.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция только для чтения.</summary>
      <returns>Значение true, если коллекция доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.Int32)">
      <summary>Получает или задает элемент с указанным индексом.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> по указанному индексу.</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.String)">
      <summary>Получает или задает элемент с указанным именем маршрута.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> по указанному индексу.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.OnGetEnumerator">
      <summary>Вызывается внутри ‎для получения перечислителя коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Remove(System.String)">
      <summary>Удаляет экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" /> из коллекции.</summary>
      <returns>Значение true, если объект удален. В противном случае — значение false.Также этот метод возвращает значение false, если <paramref name="name" /> не найден в коллекции.</returns>
      <param name="name">Имя удаляемого маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.Http.Routing.IHttpRoute)">
      <summary>Добавляет элемент в коллекцию.</summary>
      <param name="route">Объект для добавления в коллекцию.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.Http.Routing.IHttpRoute)">
      <summary>Удаляет из коллекции первое вхождение указанного объекта.</summary>
      <returns>Значение true, если элемент <paramref name="route" /> был успешно удален из коллекции; в противном случае — false.Также этот метод возвращает значение false, если <paramref name="route" /> не найден в исходной коллекции.</returns>
      <param name="route">Объект, удаляемый из коллекции.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
      <summary>Получает <see cref="T:System.Web.Http.Routing.IHttpRoute" /> с указанным именем маршрута.</summary>
      <returns>Значение true, если коллекция содержит элемент с указанным именем. В противном случае — значение false.</returns>
      <param name="name">Имя маршрута.</param>
      <param name="route">При возврате из метода содержит экземпляр <see cref="T:System.Web.Http.Routing.IHttpRoute" />, если имя маршрута найдено; в противном случае — NULL.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.VirtualPathRoot">
      <summary>Получает корень виртуального пути.</summary>
      <returns>Корень виртуального пути.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
      <summary> Методы расширения для <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)">
      <summary> Сопоставляет указанный маршрут для обработки пакетных запросов HTTP. </summary>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="routeName">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="batchHandler">
        <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> для обработки пакетных запросов.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>Сопоставляет указанный шаблон маршрута.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>Сопоставляет заданный шаблон маршрута, задает ограничения по умолчанию.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Сопоставляет заданный шаблон маршрута, задает значения маршрута по умолчанию и ограничения.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
      <param name="constraints">Набор выражений, задающих значения для <paramref name="routeTemplate" />.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>Сопоставляет заданный шаблон маршрута и задает значения маршрута по умолчанию, ограничения и обработчик сообщений конечных точек.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
      <param name="constraints">Набор выражений, задающих значения для <paramref name="routeTemplate" />.</param>
      <param name="handler">Обработчик, которому будет отправлено сообщение.</param>
    </member>
    <member name="T:System.Web.Http.HttpServer">
      <summary> Определяет реализацию <see cref="T:System.Net.Http.HttpMessageHandler" />, передающую входящий <see cref="T:System.Net.Http.HttpRequestMessage" /> и создающую в результате <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpServer" /> с конфигурацией и диспетчером по умолчанию.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpServer" /> с указанным диспетчером. </summary>
      <param name="dispatcher">Диспетчер HTTP, который будет обрабатывать входящие запросы.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpServer" /> с указанной конфигурацией.</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" />, используемый для настройки этого экземпляра.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.HttpServer" /> с указанной конфигурацией и диспетчером.</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" />, используемый для настройки этого экземпляра.</param>
      <param name="dispatcher">Диспетчер HTTP, который будет обрабатывать входящие запросы.</param>
    </member>
    <member name="P:System.Web.Http.HttpServer.Configuration">
      <summary>Получает <see cref="T:System.Web.Http.HttpConfiguration" />, используемый для настройки этого экземпляра.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" />, используемый для настройки этого экземпляра.</returns>
    </member>
    <member name="P:System.Web.Http.HttpServer.Dispatcher">
      <summary>Получает диспетчер HTTP, обрабатывающий входящие запросы.</summary>
      <returns>Диспетчер HTTP, обрабатывающий входящие запросы.</returns>
    </member>
    <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.Initialize">
      <summary>Подготавливает сервер для операции.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Распределяет входящее <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns> Задача, представляющая асинхронную операцию.</returns>
      <param name="request">Распределяемый запрос.</param>
      <param name="cancellationToken">Маркер для отслеживания запросов на отмену.</param>
    </member>
    <member name="T:System.Web.Http.IHttpActionResult">
      <summary>Defines a command that asynchronously creates an <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
    </member>
    <member name="M:System.Web.Http.IHttpActionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> asynchronously.</summary>
      <returns>A task that, when completed, contains the <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    </member>
    <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
      <summary>Указывает, включаются ли в сообщения об ошибках подробности, например сообщения об исключениях и трассировка стека.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
      <summary>Подробные сведения об ошибках включаются всегда.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
      <summary>Использует поведение по умолчанию для среды размещения.При размещении в ASP.NET используется значение из элемента customErrors в файле Web.config.При самостоятельном размещении используется значение <see cref="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly" />.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
      <summary>Подробные сведения об ошибках включаются только при ответах на локальные запросы. </summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
      <summary>Подробные сведения об ошибках не включаются никогда. </summary>
    </member>
    <member name="T:System.Web.Http.NonActionAttribute">
      <summary>Представляет атрибут, используемый для указания того, что метод контроллера не является методом действия.</summary>
    </member>
    <member name="M:System.Web.Http.NonActionAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.NonActionAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.OverrideActionFiltersAttribute">
      <summary>Represents a filter attribute that overrides action filters defined at a higher level.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideActionFiltersAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.OverrideActionFiltersAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.AllowMultiple">
      <summary>Gets a value indicating whether the action filter allows multiple attribute.</summary>
      <returns>true if the action filter allows multiple attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>Gets the type of filters to override.</summary>
      <returns>The type of filters to override.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideAuthenticationAttribute">
      <summary>Represents a filter attribute that overrides authentication filters defined at a higher level.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthenticationAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.OverrideAuthorizationAttribute">
      <summary>Represents a filter attribute that overrides authorization filters defined at a higher level.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthorizationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.OverrideAuthorizationAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.AllowMultiple">
      <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
      <returns>true if more than one instance is allowed to be specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>Gets the type to filters override attributes.</summary>
      <returns>The type to filters override attributes.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideExceptionFiltersAttribute">
      <summary>Represents a filter attribute that overrides exception filters defined at a higher level.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideExceptionFiltersAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.ParameterBindingAttribute">
      <summary>Атрибут параметра или типа, порождающий <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.Если атрибут применен к объявлению типа, то это равнозначно его применению ко всем параметрам действий этого типа.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ParameterBindingAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Получает привязку параметра.</summary>
      <returns>Привязка параметра.</returns>
      <param name="parameter">Описание параметра.</param>
    </member>
    <member name="T:System.Web.Http.RouteAttribute">
      <summary>Place on an action to expose it directly via a route.</summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.RouteAttribute" /> class. </summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.RouteAttribute" /> class. </summary>
      <param name="template">The route template describing the URI pattern to match against.</param>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Name">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Order">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Template">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.RouteParameter">
      <summary>Класс <see cref="T:System.Web.Http.RouteParameter" /> можно использовать для указания свойств параметров маршрута (литералов и заполнителей в сегментах <see cref="M:IHttpRoute.RouteTemplate" />).Например, его можно использовать для указания того, что параметр маршрута не является обязательным.</summary>
    </member>
    <member name="F:System.Web.Http.RouteParameter.Optional">
      <summary>Необязательный параметр.</summary>
    </member>
    <member name="M:System.Web.Http.RouteParameter.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет этот экземпляр.</summary>
      <returns>Объект <see cref="T:System.String" />, который представляет этот экземпляр.</returns>
    </member>
    <member name="T:System.Web.Http.RoutePrefixAttribute">
      <summary> Annotates a controller with a route prefix that applies to all actions within the controller. </summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor(System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Web.Http.RoutePrefixAttribute" /> class. </summary>
      <param name="prefix">The route prefix for the controller.</param>
    </member>
    <member name="P:System.Web.Http.RoutePrefixAttribute.Prefix">
      <summary> Gets the route prefix. </summary>
    </member>
    <member name="T:System.Web.Http.ServicesExtensions">
      <summary>Предоставляет типобезопасные методы доступа для служб, полученных из объекта <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Description.IApiExplorer" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Description.IApiExplorer" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает коллекцию <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</summary>
      <returns>Возвращает коллекцию объектов <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostPrincipalService(System.Web.Http.Controllers.ServicesContainer)"></member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> или значение NULL, если экземпляры не зарегистрированы.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает коллекцию <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
      <returns>Возвращает коллекцию объектов <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает коллекцию <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Возвращает коллекцию объектов <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает службу <see cref="T:System.Web.Http.Tracing.ITraceWriter" />. </summary>
      <returns>Возвращает экземпляр <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Получает коллекцию <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
      <returns>Возвращает коллекцию объектов <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="services">Контейнер служб.</param>
    </member>
    <member name="T:System.Web.Http.Batch.BatchExecutionOrder">
      <summary> Defines the order of execution for batch requests. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.NonSequential">
      <summary> Executes the batch requests non-sequentially. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.Sequential">
      <summary> Executes the batch requests sequentially. </summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchHttpRequestMessageExtensions">
      <summary> Provides extension methods for the <see cref="T:System.Net.Http.HttpRequestMessage" /> class. </summary>
    </member>
    <member name="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)">
      <summary> Copies the properties from another <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <param name="subRequest">The sub-request.</param>
      <param name="batchRequest">The batch request that contains the properties to copy.</param>
    </member>
    <member name="T:System.Web.Http.Batch.DefaultHttpBatchHandler">
      <summary>Represents the default implementation of <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> that encodes the HTTP request/response messages as MIME multipart.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Batch.DefaultHttpBatchHandler" /> class.</summary>
      <param name="httpServer">The <see cref="T:System.Web.Http.HttpServer" /> for handling the individual batch requests.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IList{System.Net.Http.HttpResponseMessage},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Creates the batch response message.</summary>
      <returns>The batch response message.</returns>
      <param name="responses">The responses for the batch requests.</param>
      <param name="request">The original request containing all the batch requests.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)">
      <summary>Executes the batch request messages.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.HttpResponseMessage" /> for the batch requests.</returns>
      <param name="requests">The collection of batch request messages.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecutionOrder">
      <summary>Gets or sets the execution order for the batch requests. The default execution order is sequential.</summary>
      <returns>The execution order for the batch requests. The default execution order is sequential.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Converts the incoming batch request into a collection of request messages.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">The request containing the batch request messages.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Processes the batch requests.</summary>
      <returns>The result of the operation.</returns>
      <param name="request">The batch request.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.SupportedContentTypes">
      <summary>Gets the supported content types for the batch request.</summary>
      <returns>The supported content types for the batch request.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>Validates the incoming request that contains the batch request messages.</summary>
      <param name="request">The request containing the batch request messages.</param>
    </member>
    <member name="T:System.Web.Http.Batch.HttpBatchHandler">
      <summary>Определяет абстракцию для обработки пакетных HTTP-запросов.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />.</summary>
      <param name="httpServer">
        <see cref="T:System.Web.Http.HttpServer" /> для обработки отдельных пакетных запросов.</param>
    </member>
    <member name="P:System.Web.Http.Batch.HttpBatchHandler.Invoker">
      <summary>Получает средство вызова для отправки пакетных запросов в <see cref="T:System.Web.Http.HttpServer" />.</summary>
      <returns>Средство вызова для отправки пакетных запросов в <see cref="T:System.Web.Http.HttpServer" />.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Обрабатывает входящий пакетный запрос как один <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Пакетный ответ.</returns>
      <param name="request">Пакетный запрос.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Асинхронно отправляет обработчик пакетов.</summary>
      <returns>Результат операции.</returns>
      <param name="request">Отправляет запрос.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionInvoker">
      <summary>Вызывает методы действий контроллера.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно вызывает указанное действие, используя заданный контекст контроллера.</summary>
      <returns>Вызываемое действие.</returns>
      <param name="actionContext">Контекст контроллера.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
      <summary>Представляет средство выбора действий на основе отражения.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Получает сопоставления действий для <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Сопоставления действий.</returns>
      <param name="controllerDescriptor">Сведения, описывающие контроллер.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Выбирает действие для <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Выбранное действие.</returns>
      <param name="controllerContext">Контекст контроллера.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ControllerServices">
      <summary> Представляет контейнер для служб, который может относиться к конкретному контроллеру.  Это позволяет заслонить службы от его родительского <see cref="T:System.Web.Http.Controllers.ServicesContainer" />. Контроллер может задать здесь службу или перейти к более глобальному набору служб.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.#ctor(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ControllerServices" />.</summary>
      <param name="parent">Родительский контейнер служб.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
      <summary>Удаляет службу с одиночным экземпляром из служб по умолчанию.</summary>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetService(System.Type)">
      <summary>Получает службу указанного типа.</summary>
      <returns>Первый экземпляр службы или NULL, если служба не найдена.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServiceInstances(System.Type)">
      <summary>Получает список объектов служб указанного типа и проверяет тип службы.</summary>
      <returns>Список объектов служб указанного типа.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServices(System.Type)">
      <summary>Получает список объектов служб указанного типа.</summary>
      <returns>Список объектов служб указанного типа (может быть пустым, если службы не найдены).</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.IsSingleService(System.Type)">
      <summary>Проверяет, одноэкземплярный ли это тип службы.</summary>
      <returns>Значение true, если тип службы допускает наличие не более одного экземпляра, или false, если он поддерживает наличие нескольких экземпляров.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Заменяет объект службы с одиночным экземпляром.</summary>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Объект службы, заменяющий предыдущий экземпляр.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionBinding">
      <summary>Описывает, *как* будет производиться привязка, но не выполняет ее.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Controllers.HttpParameterBinding[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <param name="actionDescriptor">Обратный указатель на действие, для которого предназначена эта привязка.  </param>
      <param name="bindings">Синхронные привязки для каждого параметра.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
      <summary>Получает или задает обратный указатель на действие, для которого предназначена эта привязка.  </summary>
      <returns>Обратный указатель на действие, для которого предназначена эта привязка.  </returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.ExecuteBindingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет привязку для указанного контекста запроса.</summary>
      <returns>Задача, срабатывающая, когда привязка завершена. </returns>
      <param name="actionContext">Контекст действия для привязки. Содержит словарь параметров, который будет заполняться.</param>
      <param name="cancellationToken">Маркер отмены для отмены операции привязки. Связыватель также может привязать параметр сюда.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
      <summary>Получает или задает синхронные привязки для каждого параметра. </summary>
      <returns>Синхронные привязки для каждого параметра.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContext">
      <summary>Содержит информацию для выполняющегося действия.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor(System.Web.Http.Controllers.HttpControllerContext,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
      <param name="controllerContext">Контекст контроллера.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionArguments">
      <summary>Получает список аргументов действия.</summary>
      <returns>Список аргументов действия.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionDescriptor">
      <summary>Возвращает или задает дескриптор для контекста действия.</summary>
      <returns>Дескриптор действия.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ControllerContext">
      <summary>Возвращает или задает контекст контроллера.</summary>
      <returns>Контекст контроллера.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ModelState">
      <summary>Получает словарь состояний модели для контекста.</summary>
      <returns>Словарь состояния модели.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
      <summary>Получает сообщение запроса для контекста действия.</summary>
      <returns>Сообщение запроса для контекста действия.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Response">
      <summary>Возвращает или задает сообщение ответа для контекста действия.</summary>
      <returns>Сообщение ответа для контекста действия.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
      <summary>Содержит методы расширения для <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)">
      <typeparam name="TModel"></typeparam>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionDescriptor">
      <summary>Содержимое здесь не обновляется; не добавляйте сюда материал.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionBinding"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionName"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Configuration"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ControllerDescriptor"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> Получает настраиваемые атрибуты для действия. </summary>
      <returns>Коллекция настраиваемых атрибутов, примененных к этому действию.</returns>
      <param name="inherit">Значение true для поиска атрибутов по цепочке наследования этого действия; в противном случае — значение false.</param>
      <typeparam name="T">Тип атрибута для поиска.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetParameters"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType"></member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.SupportedHttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.HttpControllerContext">
      <summary>Содержит сведения для одиночной HTTP-операции.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.Controllers.HttpRequestContext,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Controllers.IHttpController)"></member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IHttpRouteData,System.Net.Http.HttpRequestMessage)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="routeData">Данные маршрута.</param>
      <param name="request">Запрос.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Configuration">
      <summary>Возвращает или задает конфигурацию.</summary>
      <returns>Конфигурация.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
      <summary>Возвращает или задает HTTP-контроллер.</summary>
      <returns>HTTP-контроллер.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
      <summary>Возвращает или задает дескриптор контроллера.</summary>
      <returns>Дескриптор контроллера.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Request">
      <summary>Возвращает или задает запрос.</summary>
      <returns>Запрос.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RequestContext"></member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RouteData">
      <summary>Возвращает или задает данные маршрута.</summary>
      <returns>Данные маршрута.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
      <summary> Описание и конфигурация для контроллера. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor"></member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor(System.Web.Http.HttpConfiguration,System.String,System.Type)"></member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration"></member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerName"></member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType"></member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> Возвращает коллекцию атрибутов, которые могут быть назначены &lt;typeparamref name="T" /&gt; для этого контроллера дискриптора. </summary>
      <returns>Коллекция атрибутов, связанных с этим контроллером.</returns>
      <param name="inherit">Значение true для поиска атрибутов по цепочке наследования этого контроллера; в противном случае — значение false.</param>
      <typeparam name="T">Используется для фильтрации коллекции атрибутов.Используйте значение <see cref="T:System.Object" /> для извлечения всех атрибутов.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters"></member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties"></member>
    <member name="T:System.Web.Http.Controllers.HttpControllerSettings">
      <summary>Содержит параметры для HTTP-контроллера.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerSettings.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpControllerSettings" />.</summary>
      <param name="configuration">Объект конфигурации, который используется для инициализации экземпляра.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Formatters">
      <summary>Получает коллекцию экземпляров <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для контроллера.</summary>
      <returns>Коллекция экземпляров <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.ParameterBindingRules">
      <summary>Получает коллекцию функций привязки параметров для контроллера.</summary>
      <returns>Коллекция функций привязки параметров.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Services">
      <summary>Получает коллекцию экземпляров служб для контроллера.</summary>
      <returns>Коллекция экземпляров служб.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
      <summary> Описывает привязку параметра. Привязка должна быть статической (на основе дескриптора) и может совместно использоваться в других запросах.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
      <param name="descriptor">
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />, описывающий параметры.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.Descriptor">
      <summary>Получает <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />, который использовался для инициализации данного экземпляра.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
      <summary>Если привязка недопустима, возвращает сообщение об ошибке, которое описывает ошибку привязки.</summary>
      <returns>Сообщение об ошибке. Если привязка выполнена успешно, значение — NULL.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет привязку для указанного запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="metadataProvider">Поставщик метаданных для использования при проверке.</param>
      <param name="actionContext">Контекст действия для привязки. Контекст действия содержит словарь параметров, куда будут вводиться параметры.</param>
      <param name="cancellationToken">Маркер отмены для отмены операции привязки.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
      <summary> Получает значение параметра из словаря аргументов контекста действия.</summary>
      <returns>Значение для этого параметра в заданной контексте действия или значение NULL, если этот параметр еще не был установлен.</returns>
      <param name="actionContext">Контекст действия.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
      <summary>Получает значение, указывающее, была ли привязка успешной.</summary>
      <returns>Значение true, если привязка выполнена успешно. В противном случае — false.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
      <summary>Задает результат этой привязки параметра в словаре аргументов контекста действия.  </summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="value">Значение параметра.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
      <summary>Возвращает значение, указывающее, сможет ли данный экземпляр <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> читать текст сообщения HTTP.</summary>
      <returns>Значение true, если этот <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> прочтет текст; в противном случае — false.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterDescriptor">
      <summary>Представляет дескриптор параметра HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ActionDescriptor">
      <summary>Получает или задает дескриптор действия.</summary>
      <returns>Дескриптор действия.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Configuration">
      <summary>Получает или задает <see cref="T:System.Web.Http.HttpConfiguration" /> для <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <returns>The <see cref="T:System.Web.Http.HttpConfiguration" /> для <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.DefaultValue">
      <summary>Получает значение, присваиваемое параметру по умолчанию.</summary>
      <returns>Значение параметра по умолчанию.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Получает коллекцию настраиваемых атрибутов из параметра.</summary>
      <returns>Коллекция настраиваемых атрибутов из параметра.</returns>
      <typeparam name="T">Тип пользовательских атрибутов.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
      <summary>Получает значение, указывающее, является ли параметр необязательным.</summary>
      <returns>Значение true, если параметр необязателен. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
      <summary>Получает или задает атрибут привязки параметра.</summary>
      <returns>Атрибут привязки параметра.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterName">
      <summary>Возвращает имя параметра.</summary>
      <returns>Имя параметра.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterType">
      <summary>Получает тип параметра.</summary>
      <returns>Тип параметра.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Prefix">
      <summary>Возвращает префикс параметра.</summary>
      <returns>Префикс параметра.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
      <summary>Возвращает свойства параметра.</summary>
      <returns>Свойства параметра.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpRequestContext">
      <summary>Represents the context associated with a request.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpRequestContext.#ctor"></member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.ClientCertificate">
      <summary>Gets or sets the client certificate.</summary>
      <returns>Returns <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Configuration">
      <summary>Gets or sets the configuration.</summary>
      <returns>Returns <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IncludeErrorDetail">
      <summary>Gets or sets a value indicating whether error details, such as exception messages and stack traces, should be included in the response for this request.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IsLocal">
      <summary>Gets or sets a value indicating whether the request originates from a local address.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Principal">
      <summary>.Gets or sets the principal</summary>
      <returns>Returns <see cref="T:System.Security.Principal.IPrincipal" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.RouteData">
      <summary>Gets or sets the route data.</summary>
      <returns>Returns <see cref="T:System.Web.Http.Routing.IHttpRouteData" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Url">
      <summary>Gets or sets the factory used to generate URLs to other APIs.</summary>
      <returns>Returns <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.VirtualPathRoot">
      <summary>Gets or sets the virtual path root.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionHttpMethodProvider"></member>
    <member name="P:System.Web.Http.Controllers.IActionHttpMethodProvider.HttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.IActionResultConverter">
      <summary> Контракт для подпрограммы преобразования, принимающей результат действия, возвращенный из &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt;, и преобразующей его в экземпляр <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Преобразует заданный объект <see cref="T:System.Web.Http.Controllers.IActionResultConverter" /> в другой объект.</summary>
      <returns>Преобразованный объект.</returns>
      <param name="controllerContext">Контекст контроллера.</param>
      <param name="actionResult">Результат действия.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionValueBinder">
      <summary>Определяет метод для извлечения привязки действия, связанного со значением параметра.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Возвращает <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <returns>Объект <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</returns>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
      <summary> Если контроллер отмечен атрибутом с этим интерфейсом, то он вызывается для инициализации параметров контроллера.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> Обратный вызов, задающий переопределения для конкретного контроллера в этом controllerDescriptor. </summary>
      <param name="controllerSettings">Параметры контроллера для инициализации.</param>
      <param name="controllerDescriptor">Дескриптор контроллера. Обратите внимание, что <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> может быть связан с контроллером производного типа, учитывая, что <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" /> наследуется.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionInvoker">
      <summary>Содержит метод, используемый для вызова HTTP-операции.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет HTTP-операцию.</summary>
      <returns>Запущенная задача.</returns>
      <param name="actionContext">Контекст выполнения.</param>
      <param name="cancellationToken">Маркер отмены, назначенный HTTP-операции.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionSelector">
      <summary>Содержит логику для выбора метода действия.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Возвращает карту с ключами по строке действия для всех <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />, которые может выбирать селектор.Этот метод в основном вызывается в <see cref="T:System.Web.Http.Description.IApiExplorer" /> для обнаружения всех возможных действий в контроллере.</summary>
      <returns>Карта всех <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />, которые может выбрать селектор, или значение null, если селектор не имеет четко определенного отображения <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />.</returns>
      <param name="controllerDescriptor">Дескриптор контроллера.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Выбирает действие для контроллера.</summary>
      <returns>Действие для контроллера.</returns>
      <param name="controllerContext">Контекст контроллера.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpController">
      <summary>Представляет HTTP-контроллер.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>Выполняет контроллер для синхронизации.</summary>
      <returns>Контроллер.</returns>
      <param name="controllerContext">Текущий контекст для тестового контроллера.</param>
      <param name="cancellationToken">Уведомление, отменяющее операцию.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
      <summary>Определяет методы расширения для <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Привязывает параметр, приводящий к ошибке. </summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="message">Сообщение об ошибке, описывающее причину сбоя привязки.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
      <summary>Привязывает параметр, как если бы он был объявлен с данным атрибутом.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Параметр для привязки.</param>
      <param name="attribute">Атрибут, описывающий привязку.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Привязывает параметр путем анализа содержимого текста HTTP.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Привязывает параметр путем анализа содержимого текста HTTP.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="formatters">Список модулей форматирования, позволяющий выбрать подходящий модуль форматирования для сериализации параметра в объект.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Привязывает параметр путем анализа содержимого текста HTTP.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="formatters">Список модулей форматирования, позволяющий выбрать подходящий модуль форматирования для сериализации параметра в объект.</param>
      <param name="bodyModelValidator">Проверяющий элемент управления модели текста, который служит для проверки параметра.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
      <summary>Привязывает параметр путем анализа содержимого текста HTTP.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="formatters">Список модулей форматирования, позволяющий выбрать подходящий модуль форматирования для сериализации параметра в объект.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Привязывает параметр путем анализа строки запроса.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Привязывает параметр путем анализа строки запроса.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="valueProviderFactories">Фабрики поставщиков значений, которые предоставляют данные о параметрах из строки запроса.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Привязывает параметр путем анализа строки запроса.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="binder">Связыватель модели, используемый для сборки параметра в объект.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Привязывает параметр путем анализа строки запроса.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="binder">Связыватель модели, используемый для сборки параметра в объект.</param>
      <param name="valueProviderFactories">Фабрики поставщиков значений, которые предоставляют данные о параметрах из строки запроса.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
      <summary>Привязывает параметр путем анализа строки запроса.</summary>
      <returns>Объект привязки параметра HTTP.</returns>
      <param name="parameter">Дескриптор параметра, описывающий привязываемый параметр.</param>
      <param name="valueProviderFactories">Фабрики поставщиков значений, которые предоставляют данные о параметрах из строки запроса.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
      <summary> Дескриптор действия, представляющий отраженный синхронный или асинхронный метод действия. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor,System.Reflection.MethodInfo)"></member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionName"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.Equals(System.Object)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetFilters"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetHashCode"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetParameters"></member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.MethodInfo"></member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType"></member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.SupportedHttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor">
      <summary>Представляет отраженный дескриптор параметра HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Reflection.ParameterInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Дескриптор действия.</param>
      <param name="parameterInfo">Сведения о параметрах.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.DefaultValue">
      <summary>Получает значение параметра по умолчанию.</summary>
      <returns>Значение параметра по умолчанию.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Получает коллекцию настраиваемых атрибутов из параметра.</summary>
      <returns>Коллекция настраиваемых атрибутов из параметра.</returns>
      <typeparam name="TAttribute">Тип пользовательских атрибутов.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
      <summary>Получает значение, указывающее, является ли параметр необязательным.</summary>
      <returns>Значение true, если параметр необязательный. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterInfo">
      <summary>Получает или задает сведения о параметрах.</summary>
      <returns>Сведения о параметрах.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterName">
      <summary>Возвращает имя параметра.</summary>
      <returns>Имя параметра.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterType">
      <summary>Получает тип параметра.</summary>
      <returns>Тип параметра.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
      <summary>Представляет конвертер для действий с возвращаемым типом <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Преобразует объект <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> в другой объект.</summary>
      <returns>Преобразованный объект.</returns>
      <param name="controllerContext">Контекст контроллера.</param>
      <param name="actionResult">Результат действия.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ServicesContainer">
      <summary>Абстрактный класс, предоставляющий контейнер для служб, используемых в ASP.NET Web API.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
      <summary> Добавляет службу в конец списка служб по указанному типу.  </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Экземпляр службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Добавляет службы из указанной коллекции в конец списка служб по указанному типу. </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="services">Добавляемые службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
      <summary> Удаляет все экземпляры служб указанного типа.  </summary>
      <param name="serviceType">Тип служб, удаляемый из списка служб.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearMultiple(System.Type)">
      <summary>Удаляет все экземпляры типа службы с множественными экземплярами.</summary>
      <param name="serviceType">Удаляемый тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearSingle(System.Type)">
      <summary>Удаляет все экземпляры типа службы с одиночным экземпляром.</summary>
      <param name="serviceType">Удаляемый тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
      <summary>Выполняет определенные в приложении задачи, связанные с освобождением или сбросом неуправляемых ресурсов.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
      <summary> Ищет службу, отвечающую условиям, заданным указанным предикатом, и возвращает отсчитываемый от нуля индекс первого вхождения. </summary>
      <returns>Отсчитываемый от нуля индекс первого вхождения, если оно есть. В противном случае значение равно –1.</returns>
      <param name="serviceType">Тип службы.</param>
      <param name="match">Делегат, определяющий условия для поиска элемента. </param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetService(System.Type)">
      <summary>Получает экземпляр службы указанного типа.</summary>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServiceInstances(System.Type)">
      <summary>Получает изменяемый список экземпляров служб указанного типа.</summary>
      <returns>Изменяемый список экземпляров служб.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServices(System.Type)">
      <summary>Получает коллекцию экземпляров служб указанного типа.</summary>
      <returns>Коллекция экземпляров служб.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
      <summary> Вставляет службу в коллекцию по указанному индексу. </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить службу. Если передано значение <see cref="F:System.Int32.MaxValue" />, элемент гарантированно добавляется в конец.</param>
      <param name="service">Вставляемая служба.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Вставляет элементы коллекции в список служб, начиная с указанного индекса. </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить новые элементы. Если передано значение <see cref="F:System.Int32.MaxValue" />, элементы гарантированно добавляются в конец.</param>
      <param name="services">Коллекция вставляемых служб.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
      <summary> Определяет, следует ли извлекать тип службы с помощью GetService или GetServices.  </summary>
      <returns>Значение true, если служба одиночная. </returns>
      <param name="serviceType">Запрашиваемый тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
      <summary> Удаляет первое вхождение данной службы из списка служб указанного типа. </summary>
      <returns>Значение true, если элемент удален. В противном случае — значение false.</returns>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Удаляемый экземпляр службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
      <summary> Удаляет все элементы, которые соответствуют заданному предикату. </summary>
      <returns>Число элементов, удаленных из списка.</returns>
      <param name="serviceType">Тип службы.</param>
      <param name="match">Делегат, определяющий условия для поиска удаляемых элементов.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
      <summary> Удаляет службу по указанному индексу. </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="index">Индекс (с нуля) службы, которую требуется удалить.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
      <summary> Заменяет все существующие службы указанного типа на заданный экземпляр. Это работает как для одиночных, так и для множественных служб.  </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Экземпляр службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceMultiple(System.Type,System.Object)">
      <summary>Заменяет все экземпляры типа службы с множественными экземплярами на новый экземпляр.</summary>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Экземпляр службы, который заменит текущие службы данного типа.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Заменяет все существующие службы указанного типа на заданные экземпляры. </summary>
      <param name="serviceType">Тип службы.</param>
      <param name="services">Экземпляры служб.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceSingle(System.Type,System.Object)">
      <summary>Заменяет одноэкземплярную службу указанного типа.</summary>
      <param name="serviceType">Тип службы. </param>
      <param name="service">Экземпляр службы.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ResetCache(System.Type)">
      <summary>Удаляет кэшированные значения для типа с одной службой.</summary>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
      <summary> Преобразователь для создания ответов от действий, которые возвращают произвольное значение <paramref name="T" />. </summary>
      <typeparam name="T">Объявленный возвращаемый тип действия.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.ValueResultConverter`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Преобразует результат действия с произвольным возвращаемым типом <paramref name="T" /> в экземпляр <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Созданный объект <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="controllerContext">Контекст контроллера действия.</param>
      <param name="actionResult">Результат выполнения.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.VoidResultConverter">
      <summary>Представляет преобразователь для создания ответа от действия, которое не возвращает значений.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Controllers.VoidResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Преобразует созданный ответ от действия, которое не возвращает значений.</summary>
      <returns>Преобразованный ответ.</returns>
      <param name="controllerContext">Контекст контроллера.</param>
      <param name="actionResult">Результат действия.</param>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
      <summary>Представляет контейнер внедрения зависимостей.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
      <summary> Открывает область разрешения. </summary>
      <returns>Область зависимостей.</returns>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyScope">
      <summary>Представляет интерфейс для диапазона зависимостей.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
      <summary>Извлекает службу из области.</summary>
      <returns>Извлеченная служба.</returns>
      <param name="serviceType">Извлекаемая служба.</param>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
      <summary>Извлекает коллекцию служб из области.</summary>
      <returns>Коллекция извлеченных служб.</returns>
      <param name="serviceType">Коллекция извлекаемых служб.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiDescription">
      <summary> Описывает API, определенный по относительному пути URI и HTTP-методу. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
      <summary> Возвращает или устанавливает дескриптор действия, который будет обрабатывать API. </summary>
      <returns> Дескриптор действия. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
      <summary> Возвращает или задает документация API. </summary>
      <returns> Документация. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
      <summary> Возвращает или задает HTTP-метод. </summary>
      <returns> HTTP-метод. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ID">
      <summary> Получает идентификатор, уникальный в пределах <see cref="T:System.Web.Http.HttpServer" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
      <summary> Получает описания параметров. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
      <summary> Получает или задает относительный путь. </summary>
      <returns> Относительный путь. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ResponseDescription"></member>
    <member name="P:System.Web.Http.Description.ApiDescription.Route">
      <summary> Возвращает или задает зарегистрированный маршрут для API. </summary>
      <returns> Маршрут. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
      <summary> Получает поддерживаемые модули форматирования текста запроса. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
      <summary> Получает поддерживаемые модули форматирования ответа. </summary>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorer">
      <summary> Исследует пространство URI службы на основе маршрутов, контроллеров и действий, доступных в системе. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <param name="configuration">Конфигурация.</param>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
      <summary> Получает описания API. Описания инициализируются при первом обращении. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
      <summary> Получает или задает поставщик документации. Поставщик отвечает за документирование API. </summary>
      <returns> Поставщик документации. </returns>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Получает коллекцию HttpMethods, поддерживаемых действием. Вызывается при инициализации <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Коллекция HttpMethods, поддерживаемых действием.</returns>
      <param name="route">Маршрут.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Определяет, будет ли действие рассматриваться для создания <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Вызывается при инициализации <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Значение true, если действие должно учитываться при создании <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />, в противном случае — false.</returns>
      <param name="actionVariableValue">Значение переменной действия из маршрута.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
      <param name="route">Маршрут.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Определяет, будет ли контроллер рассматриваться для создания <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Вызывается при инициализации <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Значение true, если контроллер должен учитываться при создании <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />, в противном случае — false.</returns>
      <param name="controllerVariableValue">Значение переменной контроллера из маршрута.</param>
      <param name="controllerDescriptor">Дескриптор контроллера.</param>
      <param name="route">Маршрут.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
      <summary> Этот атрибут можно использовать для контроллеров и действий с целью изменения поведения <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorerSettingsAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Description.ApiExplorerSettingsAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
      <summary> Получает или задает значение, указывающее, следует ли исключить контроллер или действие из экземпляров <see cref="T:System.Web.Http.Description.ApiDescription" />, создаваемых <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <returns>Значение true, если нужно пропустить контроллер или действие. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterDescription">
      <summary> Описывает параметр API, определенный по относительному пути URI и HTTP-методу. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiParameterDescription.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Description.ApiParameterDescription" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
      <summary> Возвращает или задает документацию. </summary>
      <returns> Документация. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
      <summary> Получает или задает имя. </summary>
      <returns> Имя. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
      <summary> Возвращает или задает дескриптор параметра. </summary>
      <returns> Дескриптор параметра. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
      <summary> Получает или задает источник параметра. Он может поступить из URI запроса, текста запроса или других мест. </summary>
      <returns> Источник. </returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterSource">
      <summary> Описывает, откуда поступил параметр. </summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromBody">
      <summary>Параметр взят из текста.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromUri">
      <summary>Параметр взят из URI.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.Unknown">
      <summary>Расположение неизвестно.</summary>
    </member>
    <member name="T:System.Web.Http.Description.IApiExplorer">
      <summary> Определяет интерфейс для получения коллекции <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
      <summary> Получает описания API. </summary>
    </member>
    <member name="T:System.Web.Http.Description.IDocumentationProvider">
      <summary> Определяет поставщик, отвечающий за документирование службы. </summary>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Получает документацию на основе <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />. </summary>
      <returns>Документация для контроллера.</returns>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Получает документацию на основе <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />. </summary>
      <returns>Документация для контроллера.</returns>
      <param name="parameterDescriptor">Дескриптор параметра.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetResponseDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)"></member>
    <member name="T:System.Web.Http.Description.ResponseDescription">
      <summary>Describes the API response.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Description.ResponseDescription" /> class.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.DeclaredType">
      <summary>Gets or sets the declared response type.</summary>
      <returns>The declared response type.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.Documentation">
      <summary>Gets or sets the response documentation.</summary>
      <returns>The response documentation.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.ResponseType">
      <summary>Gets or sets the actual response type.</summary>
      <returns>The actual response type.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ResponseTypeAttribute">
      <summary>Use this to specify the entity type returned by an action when the declared return type is <see cref="T:System.Net.Http.HttpResponseMessage" /> or <see cref="T:System.Web.Http.IHttpActionResult" />. The <see cref="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType" /> will be read by <see cref="T:System.Web.Http.Description.ApiExplorer" /> when generating <see cref="T:System.Web.Http.Description.ApiDescription" />.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Description.ResponseTypeAttribute" /> class.</summary>
      <param name="responseType">The response type.</param>
    </member>
    <member name="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType">
      <summary>Gets the response type.</summary>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
      <summary> Предоставляет реализацию <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> без внешних зависимостей. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
      <summary> Возвращает список сборок, доступных для приложения. </summary>
      <returns>&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt; сборок.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
      <summary>Предоставляет реализацию <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> по умолчанию. Другую реализацию можно зарегистрировать с помощью <see cref="T:System.Web.Http.Services.DependencyResolver" />. Используется оптимизация на случай наличия одного экземпляра <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> на один экземпляр <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, но при этом поддерживаются ситуации наличия нескольких экземпляров <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> на один <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" />. В последнем случае поиск идет несколько медленнее, так как используется словарь <see cref="P:HttpControllerDescriptor.Properties" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary> Создает <see cref="T:System.Web.Http.Controllers.IHttpController" />, заданный параметром <paramref name="controllerType" />, используя данный <paramref name="request" />.</summary>
      <returns>Экземпляр типа <paramref name="controllerType" />.</returns>
      <param name="request">Сообщение запроса.</param>
      <param name="controllerDescriptor">Дескриптор контроллера.</param>
      <param name="controllerType">Тип контроллера.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
      <summary>Представляет экземпляр <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> по умолчанию для выбора <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> по <see cref="T:System.Net.Http.HttpRequestMessage" /> Другую реализацию можно зарегистрировать с помощью <see cref="P:System.Web.Http.HttpConfiguration.Services" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector" />.</summary>
      <param name="configuration">Конфигурация.</param>
    </member>
    <member name="F:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.ControllerSuffix">
      <summary>Задает строку суффикса в имени контроллера.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerMapping">
      <summary>Возвращает карту с ключами по строке контроллера для всех <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, которые может выбирать селектор. </summary>
      <returns>Карта всех <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, которые может выбрать селектор, или значение null, если селектор не имеет четко определенного отображения <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerName(System.Net.Http.HttpRequestMessage)">
      <summary>Получает имя контроллера для указанного <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Имя контроллера для указанного <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary>Выбирает <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> для указанного <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> для указанного <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="request">Сообщение HTTP-запроса.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
      <summary> Предоставляет реализацию <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> без внешних зависимостей. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" />, используя предикат для фильтрации типов контроллеров. </summary>
      <param name="predicate">Предикат.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Возвращает список контроллеров, доступных для приложения. </summary>
      <returns>&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; контроллеров.</returns>
      <param name="assembliesResolver">Сопоставитель сборок.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.IsControllerTypePredicate">
      <summary>Получает значение, указывающее, является тип сопоставителя предикатом типа контроллера.</summary>
      <returns>Значение true, если является; в противном случае — false.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
      <summary>Передает входящий <see cref="T:System.Net.Http.HttpRequestMessage" /> реализации <see cref="T:System.Web.Http.Controllers.IHttpController" /> на обработку.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> с указанной конфигурацией.</summary>
      <param name="configuration">Конфигурация HTTP.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
      <summary>Получает конфигурацию HTTP.</summary>
      <returns>Конфигурация HTTP.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Распределяет входящее <see cref="T:System.Net.Http.HttpRequestMessage" /> в <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />, представляющий текущую операцию.</returns>
      <param name="request">Распределяемый запрос.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
      <summary> Этот класс представляет обработчик сообщений конечной точки по умолчанию. Он проверяет <see cref="T:System.Web.Http.Routing.IHttpRoute" /> сопоставленного маршрута и выбирает вызываемый обработчик сообщений. Если значение <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" /> равно NULL, то он делегирует вызов <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" />, используя указанный объект <see cref="T:System.Web.Http.HttpConfiguration" /> и объект <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> в качестве обработчика по умолчанию. </summary>
      <param name="configuration">Конфигурация сервера.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" />, используя указанные <see cref="T:System.Web.Http.HttpConfiguration" /> и <see cref="T:System.Net.Http.HttpMessageHandler" />. </summary>
      <param name="configuration">Конфигурация сервера.</param>
      <param name="defaultHandler">Обработчик по умолчанию, используемый, если у <see cref="T:System.Web.Http.Routing.IHttpRoute" /> нет <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" />.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Отправляет HTTP-запрос в качестве асинхронной операции.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="request">Отправляемое сообщение HTTP-запроса.</param>
      <param name="cancellationToken">Маркер для отмены операции.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
      <summary> Предоставляет абстракцию для управления сборками приложения. Другую реализацию можно зарегистрировать с помощью <see cref="T:System.Web.Http.Services.DependencyResolver" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
      <summary> Возвращает список сборок, доступных для приложения. </summary>
      <returns>&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; сборок.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
      <summary>Определяет методы, которые требуются для <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary>Создает объект <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>Объект <see cref="T:System.Web.Http.Controllers.IHttpController" />.</returns>
      <param name="request">Запрос сообщения.</param>
      <param name="controllerDescriptor">Дескриптор HTTP-контроллера.</param>
      <param name="controllerType">Тип контроллера.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
      <summary> Определяет методы, которые требуются для фабрики <see cref="T:System.Web.Http.Controllers.IHttpController" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
      <summary> Возвращает карту с ключами по строке контроллера для всех <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, которые может выбирать селектор.  Этот метод в основном вызывается в <see cref="T:System.Web.Http.Description.IApiExplorer" /> для обнаружения всех возможных контроллеров в системе. </summary>
      <returns>Карта всех <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, которые может выбрать селектор, или значение null, если селектор не имеет четко определенного отображения <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary> Выбирает <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> для указанного <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
      <param name="request">Сообщение запроса.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
      <summary> Предоставляет абстракцию для управления типами контроллеров в приложении. Другую реализацию можно зарегистрировать с помощью DependencyResolver.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Возвращает список контроллеров, доступных для приложения. </summary>
      <returns>&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; контроллеров.</returns>
      <param name="assembliesResolver">Сопоставитель для сбойных сборок.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
      <summary>Предоставляет сведения о методе действия, например о его имени, контроллере, параметрах, атрибутах и фильтрах.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.ActionDescriptorFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Возвращает фильтры, связанные с данным методом действия.</summary>
      <returns>Фильтры, связанные с данным методом действия.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionFilterAttribute">
      <summary>Представляет базовый класс для всех атрибутов фильтра действий.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.ActionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Вызывается после вызова метода действия.</summary>
      <param name="actionExecutedContext">Контекст выполнения действия.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Вызывается до вызова метода действия.</summary>
      <param name="actionContext">Контекст действия.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.System#Web#Http#Filters#IActionFilter#ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Асинхронно выполняет действие фильтра.</summary>
      <returns>Созданная задача для этой операции.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Маркер отмены, назначенный задаче.</param>
      <param name="continuation">Функция-делегат для продолжения после вызова метода действия.</param>
    </member>
    <member name="T:System.Web.Http.Filters.AuthorizationFilterAttribute">
      <summary>Предоставляет сведения для фильтра авторизации.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Вызывается, когда процесс запрашивает авторизацию.</summary>
      <param name="actionContext">Контекст действия, инкапсулирующий сведения для использования объекта <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</param>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.System#Web#Http#Filters#IAuthorizationFilter#ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Выполняет фильтр авторизации при синхронизации.</summary>
      <returns>Фильтр авторизации при синхронизации.</returns>
      <param name="actionContext">Контекст действия, инкапсулирующий сведения для использования объекта <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</param>
      <param name="cancellationToken">Маркер отмены операции.</param>
      <param name="continuation">Продолжение операции.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ConfigurationFilterProvider">
      <summary>Представляет поставщик фильтров конфигурации.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.ConfigurationFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Возвращает фильтры, связанные с данным методом конфигурации.</summary>
      <returns>Фильтры, связанные с данным методом конфигурации.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ExceptionFilterAttribute">
      <summary>Представляет атрибуты для фильтра исключений.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Порождает событие исключения.</summary>
      <param name="actionExecutedContext">Контекст для действия.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет фильтр исключений.</summary>
      <returns>Результат выполнения.</returns>
      <param name="actionExecutedContext">Контекст для действия.</param>
      <param name="cancellationToken">Контекст отмены.</param>
    </member>
    <member name="T:System.Web.Http.Filters.FilterAttribute">
      <summary>Представляет базовый класс для атрибутов фильтра действий.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.FilterAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.FilterAttribute.AllowMultiple">
      <summary>Возвращает значение, указывающее, допускается ли использование нескольких фильтров.</summary>
      <returns>Значение true, если использование нескольких фильтров разрешено. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterInfo">
      <summary>Предоставляет сведения о доступных фильтрах действий.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterInfo.#ctor(System.Web.Http.Filters.IFilter,System.Web.Http.Filters.FilterScope)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <param name="instance">Экземпляр этого класса.</param>
      <param name="scope">Область этого класса.</param>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Instance">
      <summary>Получает или задает экземпляр <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Scope">
      <summary>Получает или задает область <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <returns>Область FilterInfo.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterScope">
      <summary>Определяет значения, указывающие порядок запуска фильтров с одинаковым типом фильтра и порядком фильтра.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Action">
      <summary>Указывает порядок после Controller. </summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Controller">
      <summary>Указывает порядок до Action и после Global.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Global">
      <summary>Указывает действие до Controller.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpActionExecutedContext">
      <summary>Представляет действие контекста выполнения HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="exception">Исключение.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.ActionContext">
      <summary>Получает или задает контекст HTTP-действия.</summary>
      <returns>Контекст HTTP-действия.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Exception">
      <summary>Возвращает или задает исключение, созданное во время выполнения.</summary>
      <returns>Исключение, созданное во время выполнения.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
      <summary>Получает объект <see cref="T:System.Net.Http.HttpRequestMessage" /> для контекста.</summary>
      <returns>Объект <see cref="T:System.Net.Http.HttpRequestMessage" /> для контекста.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Response">
      <summary>Получает или задает <see cref="T:System.Net.Http.HttpResponseMessage" /> для контекста.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> для контекста.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext">
      <summary>Represents an authentication challenge context containing information for executing an authentication challenge.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationChallengeContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.IHttpActionResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext" /> class.</summary>
      <param name="actionContext">The action context.</param>
      <param name="result">The current action result.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.ActionContext">
      <summary>Gets the action context.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Request">
      <summary>Gets the request message.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Result">
      <summary>Gets or sets the action result to execute.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationContext">
      <summary>Represents an authentication context containing information for performing authentication.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Security.Principal.IPrincipal)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Filters.HttpAuthenticationContext" /> class.</summary>
      <param name="actionContext">The action context.</param>
      <param name="principal">The current principal.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ActionContext">
      <summary>Gets the action context.</summary>
      <returns>The action context.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ErrorResult">
      <summary>Gets or sets an action result that will produce an error response (if authentication failed; otherwise, null).</summary>
      <returns>An action result that will produce an error response.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Principal">
      <summary>Gets or sets the authenticated principal.</summary>
      <returns>The authenticated principal.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Request">
      <summary>Gets the request message.</summary>
      <returns>The request message.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpFilterCollection">
      <summary>Представляет коллекцию HTTP-фильтров.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Filters.HttpFilterCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Add(System.Web.Http.Filters.IFilter)">
      <summary>Добавляет элемент в конец коллекции.</summary>
      <param name="filter">Элемент для добавления в коллекцию.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Contains(System.Web.Http.Filters.IFilter)">
      <summary>Определяет, содержит ли коллекция указанный элемент.</summary>
      <returns>Значение true, если коллекция содержит заданный элемент. В противном случае — значение false.</returns>
      <param name="filter">Проверяемый элемент.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpFilterCollection.Count">
      <summary>Получает количество элементов в коллекции.</summary>
      <returns>Количество элементов в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Объект-перечислитель, который может использоваться для итерации в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Remove(System.Web.Http.Filters.IFilter)">
      <summary>Удаляет указанный элемент из коллекции.</summary>
      <param name="filter">Элемент, удаляемый из коллекции.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Объект-перечислитель, который может использоваться для итерации в коллекции.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IActionFilter">
      <summary>Определяет методы, используемые в фильтре действия.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Асинхронно выполняет действие фильтра.</summary>
      <returns>Созданная задача для этой операции.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Маркер отмены, назначенный задаче.</param>
      <param name="continuation">Функция-делегат для продолжения после вызова метода действия.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IAuthenticationFilter"></member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.Filters.IAuthorizationFilter">
      <summary>Определяет методы, которые требуются для фильтра авторизации.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Выполняет фильтр авторизации для синхронизации.</summary>
      <returns>Фильтр авторизации для синхронизации.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Маркер отмены, связанный с этим фильтром.</param>
      <param name="continuation">Дополнение.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IExceptionFilter">
      <summary>Определяет методы, которые требуются для фильтра исключений.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Выполняет асинхронный фильтр исключений.</summary>
      <returns>Асинхронный фильтр исключений.</returns>
      <param name="actionExecutedContext">Контекст выполнения действия.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IFilter">
      <summary>Указывает серверный компонент, используемый системой индексации для индексации документов, форматы которых связаны с IFilter.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.IFilter.AllowMultiple">
      <summary>Извлекает или задает значение, указывающее, можно ли задать для одного программного элемента несколько экземпляров указанного атрибута.</summary>
      <returns>Значение true, если можно указать несколько экземпляров; в противном случае — значение false. Значение по умолчанию — false.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IFilterProvider">
      <summary>Предоставляет сведения о фильтрах.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Возвращает перечисление фильтров.</summary>
      <returns>Перечисление фильтров.</returns>
      <param name="configuration">Конфигурация HTTP.</param>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IOverrideFilter"></member>
    <member name="P:System.Web.Http.Filters.IOverrideFilter.FiltersToOverride"></member>
    <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
      <summary> Предоставляет общие ключи для свойств, хранящихся в <see cref="P:System.Net.Http.HttpRequestMessage.Properties" />.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpActionDescriptorKey">
      <summary> Предоставляет ключ для <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />, связанного с этим запросом. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsBatchRequest">
      <summary> Предоставляет ключ, который указывает, является ли запрос пакетным. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.NoRouteMatched">
      <summary> Предоставляет ключ, который указывает, что запрос не соответствует маршруту. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestContextKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey"></member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey"></member>
    <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
      <summary> Интерфейс для контроля буферизации запросов и ответов на узле. Если узел поддерживает буферизацию запросов или ответов, то он может использовать этот интерфейс, чтобы определить политику буферизации.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>Определяет, будет ли узел буферизовать тело объекта <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Значение true, если буферизация должна использоваться; в противном случае следует использовать потоковый запрос.</returns>
      <param name="hostContext">Контекст узла.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>Определяет, будет ли узел буферизовать тело объекта <see cref="T.System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Значение true, если буферизация должна использоваться; в противном случае следует использовать потоковый ответ.</returns>
      <param name="response">Сообщение ответа HTTP.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.IHostPrincipalService">
      <summary>Defines a service for accessing the principal at the host layer.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostPrincipalService.GetCurrentPrincipal(System.Net.Http.HttpRequestMessage)">
      <summary>Get the principal at the host layer.</summary>
      <returns>The principal at the host layer.</returns>
      <param name="request">The request associated with the host context.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostPrincipalService.SetCurrentPrincipal(System.Security.Principal.IPrincipal,System.Net.Http.HttpRequestMessage)">
      <summary>Sets the principal at the host layer.</summary>
      <param name="principal">The principal.</param>
      <param name="request">The request associated with the host context.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler">
      <summary>Represents a message handler that suppresses host authentication results.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor(System.Web.Http.Hosting.IHostPrincipalService)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" /> class.</summary>
      <param name="principalService">The host principal service to use to access the current principal.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" /> class.</summary>
      <param name="configuration">The configuration from which to use services.</param>
    </member>
    <member name="P:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.HostPrincipalService">
      <summary>Gets the host principal service to use to access the current principal.</summary>
      <returns>The host principal service to use to access the current principal.</returns>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Asynchronously sends a request message.</summary>
      <returns>That task that completes the asynchronous operation.</returns>
      <param name="request">The request message to send.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.ThreadPrincipalService">
      <summary>Represents a host principal of <see cref="P:System.Threading.Thread.CurrentPrincipal" />.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.ThreadPrincipalService.#ctor"></member>
    <member name="M:System.Web.Http.Hosting.ThreadPrincipalService.GetCurrentPrincipal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Web.Http.Hosting.ThreadPrincipalService.SetCurrentPrincipal(System.Security.Principal.IPrincipal,System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Web.Http.Metadata.ModelMetadata">
      <summary>Представляет класс метаданных ModelMetadata.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.ModelMetadata" />.</summary>
      <param name="provider">Поставщик.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.AdditionalValues">
      <summary>Получает словарь, содержащий дополнительные метаданные о модели.</summary>
      <returns>Словарь, содержащий дополнительные метаданные о модели.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ContainerType">
      <summary>Получает или задает тип контейнера для модели.</summary>
      <returns>Тип контейнера для модели.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Получает или задает значение, указывающее, должны ли преобразовываться пустые строки, которые передаются обратно в формы, в значение NULL.</summary>
      <returns>Значение true, если пустые строки, которые передаются обратно в формы, должны преобразовываться в значение NULL; в противном случае — значение false.По умолчанию используется значение true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Description">
      <summary>Получает или задает описание модели.</summary>
      <returns>Описание модели.По умолчанию используется значение NULL.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetDisplayName">
      <summary>Получает отображаемое имя для модели.</summary>
      <returns>Отображаемое имя для модели.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetValidators(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Получает список проверяющих элементов управления для модели.</summary>
      <returns>Список проверяющих элементов управления для модели.</returns>
      <param name="validatorProviders">Поставщики проверки для модели.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsComplexType">
      <summary>Получает или задает значение, указывающее, является ли модель моделью сложного типа.</summary>
      <returns>Значение, указывающее, считается ли модель сложной.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsNullableValueType">
      <summary>Получает значение, показывающее, допускает ли тип значение NULL.</summary>
      <returns>Значение true, если тип допускает значения NULL. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsReadOnly">
      <summary>Получает или задает значение, указывающее, является ли модель доступной только для чтения.</summary>
      <returns>Значение true, если модель доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Model">
      <summary>Получает значение модели.</summary>
      <returns>Значение модели может быть равно NULL.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ModelType">
      <summary>Получает тип модели.</summary>
      <returns>Тип модели.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Properties">
      <summary>Получает коллекцию объектов метаданных модели, которые описывают свойства модели.</summary>
      <returns>Коллекция объектов метаданных модели, которые описывают свойства модели.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.PropertyName">
      <summary>Получает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Provider">
      <summary>Получает или задает поставщик.</summary>
      <returns>Поставщик.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadataProvider">
      <summary>Предоставляет абстрактный базовый класс для пользовательского поставщика метаданных.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Получает объект ModelMetadata для каждого свойства модели.</summary>
      <returns>Объект ModelMetadata для каждого свойства модели.</returns>
      <param name="container">Контейнер.</param>
      <param name="containerType">Тип контейнера.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Получает метаданные для заданного свойства.</summary>
      <returns>Модель метаданных для указанного свойства.</returns>
      <param name="modelAccessor">Метод доступа модели.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="propertyName">Свойство, для которого требуется получить метаданные.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Получает метаданные для указанного метода доступа модели и типа модели.</summary>
      <returns>Метаданные.</returns>
      <param name="modelAccessor">Метод доступа модели.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1">
      <summary>Предоставляет абстрактный класс для реализации поставщика метаданных.</summary>
      <typeparam name="TModelMetadata">Тип метаданных модели.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>При переопределении в производном классе создает метаданные модели для свойства по заданному прототипу.</summary>
      <returns>Метаданные модели для свойства.</returns>
      <param name="prototype">Прототип, используемый для создания метаданных модели.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>При переопределении в производном классе создает метаданные модели для свойства.</summary>
      <returns>Метаданные модели для свойства.</returns>
      <param name="attributes">Набор атрибутов.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Извлекает список свойств для модели.</summary>
      <returns>Список свойств для модели.</returns>
      <param name="container">Контейнер модели.</param>
      <param name="containerType">Тип контейнера.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Извлекает метаданные для заданного свойства, используя тип контейнера и имя свойства.</summary>
      <returns>Метаданные для указанного свойства.</returns>
      <param name="modelAccessor">Метод доступа модели.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Возвращает метаданные для заданного свойства, используя тип модели.</summary>
      <returns>Метаданные для указанного свойства.</returns>
      <param name="modelAccessor">Метод доступа модели.</param>
      <param name="modelType">Тип контейнера.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes">
      <summary>Предоставляет данные прототипа кэша для <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.#ctor(System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes" />.</summary>
      <param name="attributes">Атрибуты, предоставляющие данные для инициализации.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>Задает или возвращает атрибут отображения метаданных.</summary>
      <returns>Атрибут отображения метаданных.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>Задает или возвращает атрибут формата отображения метаданных.</summary>
      <returns>Атрибут формата отображения метаданных.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>Задает или возвращает атрибут изменяемости метаданных.</summary>
      <returns>Атрибут изменяемости метаданных.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>Задает или возвращает атрибут доступности метаданных только для чтения.</summary>
      <returns>Атрибут доступности метаданных только для чтения.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata">
      <summary>Предоставляет контейнер для общих метаданных, для класса <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> и для модели данных.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="prototype">Прототип, используемый для инициализации метаданных модели.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="provider">Поставщик метаданных.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
      <param name="attributes">Атрибуты, предоставляющие данные для инициализации.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>Извлекает значение, указывающее, должны ли преобразовываться пустые строки, которые передаются обратно в формы, в значение NULL.</summary>
      <returns>Значение true, если пустые строки, которые передаются обратно в формы, должны преобразовываться в значение NULL; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>Получает описание модели.</summary>
      <returns>Описание модели.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>Получает значение, указывающее, доступна ли модель только для чтения.</summary>
      <returns>Значение true, если модель доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1">
      <summary>Предоставляет данные прототипа кэша для <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <typeparam name="TPrototypeCache">Тип кэша прототипа.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="prototype">Прототип.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="provider">Поставщик.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
      <param name="prototypeCache">Прототип кэша.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>Указывает, должны ли пустые строки, которые передаются обратно в формы, вычисляться и преобразовываться в значение NULL.</summary>
      <returns>Значение true, если пустые строки, которые передаются обратно в формы, должны вычисляться и преобразовываться в значение NULL; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeDescription">
      <summary>Указывает значение вычисления.</summary>
      <returns>Значение вычисления.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsComplexType">
      <summary>Получает значение, указывающее, является ли модель моделью сложного типа.</summary>
      <returns>Значение, указывающее, считается ли модель платформой Web API моделью сложного типа.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>Получает значение, указывающее, доступна ли вычисляемая модель только для чтения.</summary>
      <returns>Значение true, если модель доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>Получает или задает значение, указывающее, должны ли преобразовываться пустые строки, которые передаются обратно в формы, в значение NULL.</summary>
      <returns>Значение true, если пустые строки, которые передаются обратно в формы, должны преобразовываться в значение NULL; в противном случае — значение false.По умолчанию используется значение true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.Description">
      <summary>Получает или задает описание модели.</summary>
      <returns>Описание модели.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsComplexType">
      <summary>Получает значение, указывающее, является ли модель моделью сложного типа.</summary>
      <returns>Значение, указывающее, считается ли модель платформой Web API моделью сложного типа.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsReadOnly">
      <summary>Получает или задает значение, указывающее, является ли модель доступной только для чтения.</summary>
      <returns>Значение true, если модель доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.PrototypeCache">
      <summary>Получает или задает значение, показывающее, обновляется ли кэш прототипа.</summary>
      <returns>Значение true, если кэш обновляется. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider">
      <summary>Реализует поставщик метаданных модели по умолчанию.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Создает метаданные по прототипу для заданного свойства.</summary>
      <returns>Метаданные для свойства.</returns>
      <param name="prototype">Прототип.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Создает метаданные для заданного свойства.</summary>
      <returns>Метаданные для свойства.</returns>
      <param name="attributes">Атрибуты.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider">
      <summary>Представляет пустой поставщик метаданных модели.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.ModelMetadata,System.Func{System.Object})">
      <summary>Создает метаданные из прототипа.</summary>
      <returns>Метаданные.</returns>
      <param name="prototype">Прототип метаданных модели.</param>
      <param name="modelAccessor">Метод доступа модели.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Создает прототип поставщика метаданных <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
      <returns>Прототип поставщика метаданных.</returns>
      <param name="attributes">Атрибуты.</param>
      <param name="containerType">Тип контейнера.</param>
      <param name="modelType">Тип модели.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
      <summary>Представляет привязку непосредственно к маркеру отмены.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding" />.</summary>
      <param name="descriptor">Дескриптор привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Выполняет привязку во время синхронизации.</summary>
      <returns>Привязка во время синхронизации.</returns>
      <param name="metadataProvider">Поставщик метаданных.</param>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Уведомление после отмены операций.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute">
      <summary>Представляет атрибут, вызывающий настраиваемый связыватель модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.GetBinder">
      <summary>Извлекает сопоставленный связыватель модели.</summary>
      <returns>Ссылка на объект, реализующий интерфейс <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.DefaultActionValueBinder">
      <summary>Представляет значение действия связывателя по умолчанию </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Реализация интерфейса <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> по умолчанию.Этот интерфейс является основной точкой входа для привязки параметров действий.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />, связанный с <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="actionDescriptor">Дескриптор действия.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Получает <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />, связанный с <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />, связанный с <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="parameter">Дескриптор параметра.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
      <summary>Определяет ошибку привязки.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding" />.</summary>
      <param name="descriptor">Дескриптор ошибки.</param>
      <param name="message">Сообщение.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ErrorParameterBinding.ErrorMessage">
      <summary>Получает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Выполняет метод привязки во время синхронизации.</summary>
      <param name="metadataProvider">Поставщик метаданных.</param>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Значение маркера отмены.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
      <summary>Представляет привязку параметра, которая будет считывать данные из текста и вызывать модули форматирования.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <param name="descriptor">Дескриптор.</param>
      <param name="formatters">Модуль форматирования данных.</param>
      <param name="bodyModelValidator">Проверяющий элемент управления модели текста.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.BodyModelValidator">
      <summary>Возвращает или задает интерфейс для проверяющего элемента управления модели текста.</summary>
      <returns>Интерфейс для проверяющего элемента управления модели текста.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.ErrorMessage">
      <summary>Получает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет привязку <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Результат действия.</returns>
      <param name="metadataProvider">Поставщик метаданных.</param>
      <param name="actionContext">Контекст, связанный с действием.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.Formatters">
      <summary>Возвращает или задает перечисляемый объект, который представляет модуль форматирования для привязки параметров.</summary>
      <returns>Перечисляемый объект, который представляет модуль форматирования для привязки параметров.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Асинхронно считывает содержимое <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Результат действия.</returns>
      <param name="request">Запрос.</param>
      <param name="type">Тип.</param>
      <param name="formatters">Модуль форматирования данных.</param>
      <param name="formatterLogger">Средство ведения журнала формата.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.WillReadBody">
      <summary>Указывает, читает ли <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> текст.</summary>
      <returns>Значение true, если <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> читает текст. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormDataCollectionExtensions">
      <summary>Содержимое здесь не обновляется; не добавляйте сюда материал.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehavior">
      <summary>Перечисляет варианты поведения HTTP-привязки.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Never">
      <summary>Не использовать HTTP-привязку.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Optional">
      <summary>Необязательное поведение привязки.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Required">
      <summary>HTTP-привязка обязательна.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute">
      <summary>Предоставляет базовый класс для атрибутов поведения привязки модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.#ctor(System.Web.Http.ModelBinding.HttpBindingBehavior)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute" />.</summary>
      <param name="behavior">Поведение.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.Behavior">
      <summary>Получает или задает категорию поведения.</summary>
      <returns>Категория поведения.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.TypeId">
      <summary>Получает уникальный идентификатор этого атрибута.</summary>
      <returns>Идентификатор этого атрибута.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
      <summary>Привязка параметра к запросу.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding" />.</summary>
      <param name="descriptor">Дескриптор параметра.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет привязку параметра.</summary>
      <returns>Привязанный параметр.</returns>
      <param name="metadataProvider">Поставщик метаданных.</param>
      <param name="actionContext">Контекст действия.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IModelBinder">
      <summary>Определяет методы, которые требуются для связывателя модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.IModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Привязывает модель к значению, используя указанный контекст контроллера и контекст привязки.</summary>
      <returns>Значение привязки.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
      <summary>Представляет поставщик значений для привязки параметров.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
      <summary>Получает экземпляры <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />, которые используются этой привязкой параметров.</summary>
      <returns>Экземпляры <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />, которые используются этой привязкой параметров.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter">
      <summary>Представляет класс <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для обработки данных с URL-кодированием в HTML-формах, то есть application/x-www-form-urlencoded.  </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.CanReadType(System.Type)">
      <summary> Определяет, может ли этот <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> читать объекты указанного <paramref name="type" />. </summary>
      <returns>Значение true, если объекты этого типа можно читать, в противном случае — false.</returns>
      <param name="type">Тип считываемого объекта.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Считывает объект указанного <paramref name="type" /> из заданного потока. Этот метод вызывается во время десериализации.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.Tasks.Task" />, результатом которого будет считанный экземпляр объекта.</returns>
      <param name="type">Тип объекта для чтения.</param>
      <param name="readStream">Экземпляр <see cref="T:System.IO.Stream" /> для чтения.</param>
      <param name="content">Считываемое содержимое.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
      <summary>Указание того, что этот параметр использует связыватель модели.При этом может дополнительно указываться связыватель модели и поставщики значений, позволяющие ему работать.Производные атрибуты могут предоставлять дополнительные параметры для связывателя модели или поставщика значений.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
      <param name="binderType">Тип связывателя модели.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
      <summary>Получает или задает тип связывателя модели.</summary>
      <returns>Тип связывателя модели. </returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Получает привязку для параметра.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />, содержащий привязку.</returns>
      <param name="parameter">Связываемый параметр.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary> Получает IModelBinder для типа. </summary>
      <returns> Связыватель модели, не равный NULL.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели, который должен привязывать связыватель.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinderProvider(System.Web.Http.HttpConfiguration)">
      <summary>Получает поставщик связывателей модели.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="configuration">Объект конфигурации <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary> Получает поставщики значений, которые будут передаваться связывателю модели. </summary>
      <returns>Коллекция экземпляров <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="configuration">Объект конфигурации <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
      <summary>Получает или задает имя для рассмотрения в качестве имени параметра при привязке модели.</summary>
      <returns>Имя параметра, которое необходимо использовать.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.SuppressPrefixCheck">
      <summary>Возвращает или задает значение, указывающее, нужно ли подавить проверку префикса.</summary>
      <returns>Значение true, если проверка префикса подавляется. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderConfig">
      <summary>Предоставляет контейнер для конфигурации связывателей модели.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ResourceClassKey">
      <summary>Получает или задает имя файла ресурсов (ключа класса), содержащего локализованные значения строк.</summary>
      <returns>Имя файла ресурсов (ключа класса).</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.TypeConversionErrorMessageProvider">
      <summary>Получает или задает текущий поставщик для сообщения об ошибке преобразования типа.</summary>
      <returns>Текущий поставщик для сообщения об ошибке преобразования типа.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ValueRequiredErrorMessageProvider">
      <summary>Получает или задает текущий поставщик для сообщений об ошибках типа "требуется значение".</summary>
      <returns>Поставщик сообщений об ошибках.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider">
      <summary>Предоставляет контейнер для поставщика сообщений об ошибках связывателя модели.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
      <summary> Описывает параметр, который привязывается через ModelBinding.   </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding" />.</summary>
      <param name="descriptor">Дескриптор параметра.</param>
      <param name="modelBinder">Связыватель модели.</param>
      <param name="valueProviderFactories">Коллекция фабрик поставщиков значений.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.Binder">
      <summary>Получает связыватель модели.</summary>
      <returns>Связыватель модели.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет привязку параметра через связыватель модели.</summary>
      <returns>Задача, срабатывающая, когда привязка завершена.</returns>
      <param name="metadataProvider">Поставщик метаданных для использования при проверке.</param>
      <param name="actionContext">Контекст действия для привязки.</param>
      <param name="cancellationToken">Маркер отмены, присваиваемый этой задаче для отмены операции привязки.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ValueProviderFactories">
      <summary>Получает коллекцию фабрик поставщиков значений.</summary>
      <returns>Коллекция фабрик поставщиков значений.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderProvider">
      <summary>Предоставляет абстрактный базовый класс для поставщиков связывателей модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Ищет связыватель для указанного типа.</summary>
      <returns>Связыватель, способный связать этот тип. Также это может быть значение NULL, если связывателю заведомо известно, что он не может связать этот тип.</returns>
      <param name="configuration">Объект конфигурации.</param>
      <param name="modelType">Тип модели для привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBindingContext">
      <summary>Предоставляет контекст, в котором функционирует связыватель модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor(System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Возвращает или задает значение, указывающее, должен ли связыватель использовать пустой префикс.</summary>
      <returns>Значение true, если связыватель должен использовать пустой префикс. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.Model">
      <summary>Возвращает или задает модель.</summary>
      <returns>Модель.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelMetadata">
      <summary>Возвращает или задает метаданные модели.</summary>
      <returns>Метаданные модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelName">
      <summary>Возвращает или задает имя модели.</summary>
      <returns>Имя модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelState">
      <summary>Возвращает или задает состояние модели.</summary>
      <returns>Состояние модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelType">
      <summary>Возвращает или задает тип модели.</summary>
      <returns>Тип модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.PropertyMetadata">
      <summary>Возвращает метаданные свойства.</summary>
      <returns>Метаданные свойства.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValidationNode">
      <summary>Возвращает или задает узел проверки.</summary>
      <returns>Узел проверки.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValueProvider">
      <summary>Возвращает или задает поставщик значений.</summary>
      <returns>Поставщик значений.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelError">
      <summary>Представляет ошибку, которая происходит во время привязки модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelError" /> с использованием указанного исключения.</summary>
      <param name="exception">Исключение.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelError" />, используя указанные исключение и сообщение об ошибке.</summary>
      <param name="exception">Исключение.</param>
      <param name="errorMessage">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelError" />, используя указанное сообщение об ошибке.</summary>
      <param name="errorMessage">Сообщение об ошибке.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.ErrorMessage">
      <summary>Возвращает или задает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.Exception">
      <summary>Возвращает или задает объект исключения.</summary>
      <returns>Объект исключения.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelErrorCollection">
      <summary>Представляет коллекцию экземпляров <see cref="T:System.Web.Http.ModelBinding.ModelError" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.Exception)">
      <summary>Добавляет указанный объект Exception в коллекцию ошибок модели.</summary>
      <param name="exception">Исключение.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.String)">
      <summary>Добавляет указанное сообщение об ошибке в коллекцию ошибок модели.</summary>
      <param name="errorMessage">Сообщение об ошибке.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelState">
      <summary>Инкапсулирует состояние привязки модели к свойству аргумента метода действия или к самому аргументу.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelState.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelState" />.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Errors">
      <summary>Возвращает объект <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" />, содержащий все ошибки, появившиеся во время привязки модели.</summary>
      <returns>Ошибки в состоянии модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Value">
      <summary>Возвращает объект <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />, инкапсулирующий значение, к которому была осуществлена привязка во время привязки модели.</summary>
      <returns>Значение состояния модели.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelStateDictionary">
      <summary>Представляет состояние попытки привязать переданную форму к методу действия. Это состояние включает сведения о проверке.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />, используя значения, которые копируются из указанного словаря состояния модели.</summary>
      <param name="dictionary">Словарь.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Добавляет указанный элемент в словарь состояния модели.</summary>
      <param name="item">Объект для добавления в словарь состояния модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.String,System.Web.Http.ModelBinding.ModelState)">
      <summary>Добавляет в словарь состояния модели элемент, имеющий указанные ключ и значение.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Добавляет указанную ошибку модели в коллекцию ошибок для словаря состояния модели, связанного с заданным ключом.</summary>
      <param name="key">Ключ.</param>
      <param name="exception">Исключение.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Добавляет указанное сообщение об ошибке в коллекцию ошибок для словаря состояния модели, связанного с заданным ключом.</summary>
      <param name="key">Ключ.</param>
      <param name="errorMessage">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Clear">
      <summary>Удаляет все элементы из словаря состояния модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Определяет, содержит ли словарь состояния модели конкретное значение.</summary>
      <returns>Значение true, если объект найден в словаре состояния модели. В противном случае — значение false.</returns>
      <param name="item">Объект, который требуется найти в словаре состояния модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Определяет, содержит ли словарь состояния модели указанный ключ.</summary>
      <returns>Значение true, если словарь состояния модели содержит указанный ключ. В противном случае — значение false.</returns>
      <param name="key">Ключ, который требуется найти в словаре состояния модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState}[],System.Int32)">
      <summary>Копирует элементы словаря состояния модели в массив, начиная с указанного индекса.</summary>
      <param name="array">Массив. Индексация в массиве должна вестись с нуля.</param>
      <param name="arrayIndex">Отсчитываемый с нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Count">
      <summary>Возвращает число пар "ключ/значений", содержащихся в коллекции.</summary>
      <returns>Количество пар "ключ-значение" в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.GetEnumerator">
      <summary>Возвращает перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsReadOnly">
      <summary>Получает значение, указывающее, действительно ли коллекция доступна только для чтения.</summary>
      <returns>Значение true, если коллекция доступна только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsValid">
      <summary>Возвращает значение, указывающее, допустим ли данный экземпляр словаря состояния модели.</summary>
      <returns>Значение true, если экземпляр допустим. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.IsValidField(System.String)">
      <summary>Определяет, существуют ли какие-либо объекты <see cref="T:System.Web.Http.ModelBinding.ModelError" />, связанные с указанным ключом или содержащие его в качестве префикса.</summary>
      <returns>Значение true, если словарь состояния модели содержит значение, связанное с указанным ключом. В противном случае — значение false.</returns>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Item(System.String)">
      <summary>Возвращает или задает значение, связанное с указанным ключом.</summary>
      <returns>Элемент состояния модели.</returns>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Keys">
      <summary>Возвращает коллекцию, содержащую ключи в словаре.</summary>
      <returns>Коллекция, содержащая ключи словаря состояния модели.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Merge(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Копирует значения из указанного объекта <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> в данный словарь, перезаписывая существующие значения, если ключи совпадают.</summary>
      <param name="dictionary">Словарь.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Удаляет первое вхождение указанного объекта из словаря состояния модели.</summary>
      <returns>Значение true, если объект удален из словаря состояния модели. В противном случае — значение false. Этот метод также возвращает значение false, если объект не найден в словаре состояния модели.</returns>
      <param name="item">Объект, который требуется удалить из словаря состояния модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.String)">
      <summary>Удаляет элемент с заданным ключом из словаря состояния модели.</summary>
      <returns>Значение true, если объект удален. В противном случае — значение false. Этот метод также возвращает значение false, если ключ не найден в словаре состояния модели.</returns>
      <param name="key">Ключ элемента, который необходимо удалить.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Web.Http.ValueProviders.ValueProviderResult)">
      <summary>Задает значение для указанного ключа, используя заданный словарь поставщиков значений.</summary>
      <param name="key">Ключ.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Объект IEnumerator, который может использоваться для итерации в коллекции.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.TryGetValue(System.String,System.Web.Http.ModelBinding.ModelState@)">
      <summary>Пытается получить значение, связанное с указанным ключом.</summary>
      <returns>Значение true, если объект содержит элемент с указанным ключом. В противном случае — значение false.</returns>
      <param name="key">Ключ значения, которое необходимо получить.</param>
      <param name="value">Значение, связанное с указанным ключом.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Values">
      <summary>Возвращает коллекцию, содержащую значения в словаре.</summary>
      <returns>Коллекция, содержащая значения словаря состояния модели.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
      <summary> Коллекция функций, способных формировать привязки для заданных параметров.    </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Добавляет функцию в конец коллекции.  Добавляемая функция — это оболочка funcInner, проверяющая, соответствуют ли parameterType и typeMatch. </summary>
      <param name="typeMatch">Тип, сопоставляемый с HttpParameterDescriptor.ParameterType.</param>
      <param name="funcInner">Внутренняя функция, вызываемая при совпадении типов.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Вставляет функций в коллекцию по указанному индексу. /// Добавляемая функция — это оболочка funcInner, проверяющая, соответствуют ли parameterType и typeMatch. </summary>
      <param name="index">Индекс для вставки.</param>
      <param name="typeMatch">Тип, сопоставляемый с HttpParameterDescriptor.ParameterType.</param>
      <param name="funcInner">Внутренняя функция, вызываемая при совпадении типов.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Выполняет все функции привязки по порядку, пока какая-либо из них не вернет привязку, не равную NULL.  </summary>
      <returns>Первая полученная для параметра привязка, не равная NULL. Значение NULL, если такая привязка не получена.</returns>
      <param name="parameter">Привязываемый параметр.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1">
      <summary>Сопоставляет запрос браузера с массивом.</summary>
      <typeparam name="TElement">Тип массива.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Указывает, привязана ли модель.</summary>
      <returns>Значение true, если указанная модель привязана. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Преобразует коллекцию в массив.</summary>
      <returns>Значение true во всех случаях.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
      <param name="newCollection">Новая коллекция.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider">
      <summary>Предоставляет связыватель модели для массивов.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Возвращает связыватель модели для массивов.</summary>
      <returns>Связыватель модели или NULL, если получить связыватель не удалось.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1">
      <summary>Сопоставляет запрос браузера с коллекцией.</summary>
      <typeparam name="TElement">Тип коллекции.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Выполняет привязку модели, используя указанные контекст выполнения и контекст привязки.</summary>
      <returns>Значение true, если привязка модели прошла успешно. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Предоставляет производным классам способ работы с коллекцией перед ее возвратом из связывателя.</summary>
      <returns>Значение true во всех случаях.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
      <param name="newCollection">Новая коллекция.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider">
      <summary>Предоставляет связыватель модели для коллекции.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает связыватель модели для коллекции.</summary>
      <returns>Связыватель модели.</returns>
      <param name="configuration">Конфигурация модели.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto">
      <summary>Представляет объект переноса данных (DTO) для сложной модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDto.#ctor(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Metadata.ModelMetadata})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <param name="modelMetadata">Метаданные модели.</param>
      <param name="propertyMetadata">Коллекция метаданных свойств.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.ModelMetadata">
      <summary>Получает или задает метаданные модели в <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Метаданные модели <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.PropertyMetadata">
      <summary>Получает или задает коллекцию метаданных свойств <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Коллекция метаданных свойств <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.Results">
      <summary>Получает или задает результаты <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Результаты <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder">
      <summary>Представляет связыватель модели для объекта <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Определяет, привязана ли указанная модель.</summary>
      <returns>Значение true, если указанная модель привязана. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider">
      <summary>Представляет сложную модель, которая вызывает поставщик привязки модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает сопоставленный связыватель модели.</summary>
      <returns>Связыватель модели.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели для извлечения.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult">
      <summary>Представляет результат для объекта <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.#ctor(System.Object,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult" />.</summary>
      <param name="model">Объект модели.</param>
      <param name="validationNode">Узел проверки.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.Model">
      <summary>Получает или задает модель для данного объекта.</summary>
      <returns>Модель для данного объекта.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.ValidationNode">
      <summary>Получает или задает <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> для данного объекта.</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> для данного объекта.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
      <summary>Представляет собой <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />, который выполняет делегирование одному из экземпляров <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> в коллекции.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Перечисление связывателей.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Web.Http.ModelBinding.IModelBinder[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Массив связывателей.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Указывает, привязана ли указанная модель.</summary>
      <returns>Значение true, если модель привязана. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider">
      <summary>Предоставляет класс для поставщиков связывателей составной модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelBinderProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
      <param name="providers">Коллекция <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Получает связыватель для модели.</summary>
      <returns>Связыватель для модели.</returns>
      <param name="configuration">Конфигурация связывателя.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.Providers">
      <summary>Получает поставщики для связывателя составной модели.</summary>
      <returns>Коллекция поставщиков.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2">
      <summary>Сопоставляет запрос браузера с объектом данных словаря.</summary>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TValue">Тип значения.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Преобразует коллекцию в словарь.</summary>
      <returns>Значение true во всех случаях.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
      <param name="newCollection">Новая коллекция.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider">
      <summary>Предоставляет связыватель модели для словаря.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает сопоставленный связыватель модели.</summary>
      <returns>Связанный связыватель модели.</returns>
      <param name="configuration">Используемая конфигурация.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2">
      <summary>Сопоставляет запрос браузера с объектом данных пары "ключ-значение".</summary>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TValue">Тип значения.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Выполняет привязку модели, используя указанные контекст выполнения и контекст привязки.</summary>
      <returns>Значение true, если привязка модели прошла успешно. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider">
      <summary>Предоставляет связыватель модели для коллекции пар "ключ-значение".</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает сопоставленный связыватель модели.</summary>
      <returns>Связанный связыватель модели.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder">
      <summary>Сопоставляет запрос браузера с изменяемым объектом данных.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Выполняет привязку модели, используя указанные контекст действия и контекст привязки.</summary>
      <returns>Значение true, если привязка прошла успешно. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CanUpdateProperty(System.Web.Http.Metadata.ModelMetadata)">
      <summary>Извлекает значение, указывающее, можно ли изменять свойство.</summary>
      <returns>Значение true, если свойство можно менять. В противном случае — значение false.</returns>
      <param name="propertyMetadata">Метаданные проверяемого свойства.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CreateModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Создает экземпляр модели.</summary>
      <returns>Созданный объект модели.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.EnsureModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Создает экземпляр модели, если экземпляр не существует в контексте привязки.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.GetMetadataForProperties(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Извлекает метаданные для свойств модели.</summary>
      <returns>Метаданные для свойств модели.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.SetProperty(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.Metadata.ModelMetadata,System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult,System.Web.Http.Validation.ModelValidator)">
      <summary>Задает значение указанного свойства.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
      <param name="propertyMetadata">Метаданные задаваемого свойства.</param>
      <param name="dtoResult">Проверочные сведения о свойстве.</param>
      <param name="requiredValidator">Проверяющий элемент управления для модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider">
      <summary>Предоставляет связыватель модели для изменяемых объектов.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает связыватель модели указанного типа.</summary>
      <returns>Связыватель модели.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели для извлечения.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider">
      <summary>Предоставляет простой связыватель модели для этого класса привязки модели.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Func{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" />.</summary>
      <param name="modelType">Тип модели.</param>
      <param name="modelBinderFactory">Фабрика связывателей модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" />, используя указанные тип модели и связыватель модели.</summary>
      <param name="modelType">Тип модели.</param>
      <param name="modelBinder">Связыватель модели.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Возвращает связыватель модели, используя указанные контекст выполнения и контекст привязки.</summary>
      <returns>Связыватель модели или NULL, если получить связыватель не удалось.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.ModelType">
      <summary>Получает тип модели.</summary>
      <returns>Тип модели.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.SuppressPrefixCheck">
      <summary>Возвращает или задает значение, указывающее, нужно ли подавить проверку префикса.</summary>
      <returns>Значение true, если проверка префикса подавляется. В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder">
      <summary>Сопоставляет запрос браузера с объектом данных. Этот тип используется, если привязка модели нуждается в преобразовании с помощью преобразователя типов .NET Framework.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Выполняет привязку модели, используя указанные контекст контроллера и контекст привязки.</summary>
      <returns>Значение true, если привязка модели прошла успешно. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider">
      <summary>Предоставляет связыватель для модели, нуждающейся в преобразовании типов.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает связыватель для модели, нуждающейся в преобразовании типов.</summary>
      <returns>Связыватель модели или Nothing, если тип невозможно преобразовать или нет значения, которое можно преобразовать.</returns>
      <param name="configuration">Конфигурация связывателя.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder">
      <summary>Сопоставляет запрос браузера с объектом данных. Этот класс используется, если для привязки модели не требуется преобразование типов.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Выполняет привязку модели, используя указанные контекст выполнения и контекст привязки.</summary>
      <returns>Значение true, если привязка модели прошла успешно. В противном случае — значение false.</returns>
      <param name="actionContext">Контекст действия.</param>
      <param name="bindingContext">Контекст привязки.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider">
      <summary>Предоставляет связыватель для модели, не нуждающейся в преобразовании типов.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Извлекает сопоставленный связыватель модели.</summary>
      <returns>Связанный связыватель модели.</returns>
      <param name="configuration">Конфигурация.</param>
      <param name="modelType">Тип модели.</param>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestErrorMessageResult">
      <summary>Represents an action result that returns <see cref="F:System.Net.HttpStatusCode.BadRequest" /> response and performs content negotiation on an see <see cref="T:System.Web.Http.HttpError" /> with  <see cref="P:System.Web.Http.HttpError.Message" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> class.</summary>
      <param name="message">The user-visible error message.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> class. </summary>
      <param name="message">The user-visible error message.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Message">
      <summary>Gets the user-visible error message.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestResult">
      <summary>Represents an action result that returns an empty <see cref="F:System.Net.HttpStatusCode.BadRequest" /> response.</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.BadRequestResult" /> class.</summary>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.BadRequestResult" /> class.</summary>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously executes the request.</summary>
      <returns>The task that completes the execute operation.</returns>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The request message which led to this result.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ConflictResult">
      <summary>Represents an action result that performs conflict result and returns a specified value.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.ConflictResult" /> class.</summary>
      <param name="request">The HTTP request.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.ConflictResult" /> class.</summary>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Executes asynchronously the operation of the conflict result.</summary>
      <returns>Asynchronously executes the specified task.</returns>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Results.ConflictResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The HTTP request message which led to this result.</returns>
    </member>
    <member name="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1">
      <summary>Represents an action result that performs route generation and content negotiation and returns a <see cref="F:System.Net.HttpStatusCode.Created" /> response when content negotiation succeeds.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="routeName">The name of the route to use for generating the URL.</param>
      <param name="routeValues">The route data to use for generating the URL.</param>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.Routing.UrlHelper,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="routeName">The name of the route to use for generating the URL.</param>
      <param name="routeValues">The route data to use for generating the URL.</param>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="urlFactory">The factory to use to generate the route URL.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Content">
      <summary>Gets the content value to negotiate and format in the entity body.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteName">
      <summary>Gets the name of the route to use for generating the URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteValues">
      <summary>Gets the route data to use for generating the URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.UrlFactory">
      <summary>Gets the factory to use to generate the route URL.</summary>
    </member>
    <member name="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1">
      <summary>Represents an action result that performs content negotiation and returns a <see cref="F:System.Net.HttpStatusCode.Created" /> response when it succeeds.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="location">The content value to negotiate and format in the entity body.</param>
      <param name="content">The location at which the content has been created.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="location">The location at which the content has been created.</param>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Content">
      <summary>Gets the content value to negotiate and format in the entity body.</summary>
      <returns>The content value to negotiate and format in the entity body.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
      <returns>The content negotiator to handle content negotiation.</returns>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Executes asynchronously the operation of the created negotiated content result.</summary>
      <returns>Asynchronously executes a return value.</returns>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
      <returns>The formatters to use to negotiate and format the content.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Location">
      <summary>Gets the location at which the content has been created.</summary>
      <returns>The location at which the content has been created.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The HTTP request message which led to this result.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ExceptionResult">
      <summary>Represents an action result that returns a <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> response and performs content negotiation on an <see cref="T:System.Web.Http.HttpError" />  based on an <see cref="P:System.Web.Http.Results.ExceptionResult.Exception" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.ExceptionResult" /> class.</summary>
      <param name="exception">The exception to include in the error.</param>
      <param name="includeErrorDetail">true if the error should include exception messages; otherwise, false . </param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.ExceptionResult" /> class. </summary>
      <param name="exception">The exception to include in the error.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Exception">
      <summary>Gets the exception to include in the error.</summary>
      <returns>Returns <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.IncludeErrorDetail">
      <summary>Gets a value indicating whether the error should include exception messages.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.FormattedContentResult`1">
      <summary>Represents an action result that returns formatted content.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> class with the values provided.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="content">The content value to format in the entity body.</param>
      <param name="formatter">The formatter to use to format the content.</param>
      <param name="mediaType">The value for the Content-Type header, or <see cref="null" /> to have the formatter pick a default value.</param>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> class with the values provided.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="content">The content value to format in the entity body.</param>
      <param name="formatter">The formatter to use to format the content.</param>
      <param name="mediaType">The value for the Content-Type header, or <see cref="null" /> to have the formatter pick a default value.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Content">
      <summary>Gets the content value to format in the entity body.</summary>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Formatter">
      <summary>Gets the formatter to use to format the content.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.MediaType">
      <summary>Gets the value for the Content-Type header, or <see cref="null" /> to have the formatter pick a default value.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.StatusCode">
      <summary>Gets the HTTP status code for the response message.</summary>
    </member>
    <member name="T:System.Web.Http.Results.InternalServerErrorResult">
      <summary>Represents an action result that returns an empty <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> response.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> class. </summary>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> class. </summary>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InternalServerErrorResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.InvalidModelStateResult">
      <summary>Represents an action result that returns a <see cref="F:System.Net.HttpStatusCode.BadRequest" /> response and performs content negotiation on an <see cref="T:System.Web.Http.HttpError" /> based on a <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> class.</summary>
      <param name="modelState">The model state to include in the error.</param>
      <param name="includeErrorDetail">true if the error should include exception messages; otherwise,  false.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> class.</summary>
      <param name="modelState">The model state to include in the error.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
      <returns>The content negotiator to handle content negotiation.</returns>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Creates a response message asynchronously.</summary>
      <returns>A task that, when completed, contains the response message.</returns>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
      <returns>The formatters to use to negotiate and format the content.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.IncludeErrorDetail">
      <summary>Gets a value indicating whether the error should include exception messages.</summary>
      <returns>true if the error should include exception messages; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ModelState">
      <summary>Gets the model state to include in the error.</summary>
      <returns>The model state to include in the error.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The request message which led to this result.</returns>
    </member>
    <member name="T:System.Web.Http.Results.JsonResult`1">
      <summary>Represents an action result that returns an <see cref="F:System.Net.HttpStatusCode.OK" /> response with JSON data.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.JsonResult`1" /> class with the values provided.</summary>
      <param name="content">The content value to serialize in the entity body.</param>
      <param name="serializerSettings">The serializer settings.</param>
      <param name="encoding">The content encoding.</param>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.JsonResult`1" /> class with the values provided.</summary>
      <param name="content">The content value to serialize in the entity body.</param>
      <param name="serializerSettings">The serializer settings.</param>
      <param name="encoding">The content encoding.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Content">
      <summary>Gets the content value to serialize in the entity body.</summary>
      <returns>The content value to serialize in the entity body.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Encoding">
      <summary>Gets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Creates a response message asynchronously.</summary>
      <returns>A task that, when completed, contains the response message.</returns>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The request message which led to this result.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.SerializerSettings">
      <summary>Gets the serializer settings.</summary>
      <returns>The serializer settings.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NegotiatedContentResult`1">
      <summary>Represents an action result that performs content negotiation.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Content">
      <summary>Gets the content value to negotiate and format in the entity body.</summary>
      <returns>The content value to negotiate and format in the entity body.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
      <returns>The content negotiator to handle content negotiation.</returns>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Executes asynchronously an HTTP negotiated content results.</summary>
      <returns>Asynchronously executes an HTTP negotiated content results.</returns>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
      <returns>The formatters to use to negotiate and format the content.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The HTTP request message which led to this result.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.StatusCode">
      <summary>Gets the HTTP status code for the response message.</summary>
      <returns>The HTTP status code for the response message.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NotFoundResult">
      <summary>Represents an action result that returns an empty <see cref="F:System.Net.HttpStatusCode.NotFound" /> response.</summary>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.NotFoundResult" /> class.</summary>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.NotFoundResult" /> class.</summary>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.NotFoundResult.Request">
      <summary>Gets the request message which led to this result.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkNegotiatedContentResult`1">
      <summary>Represents an action result that performs content negotiation.</summary>
      <typeparam name="T">The type of content in the entity body.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="contentNegotiator">The content negotiator to handle content negotiation.</param>
      <param name="request">The request message which led to this result.</param>
      <param name="formatters">The formatters to use to negotiate and format the content.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> class with the values provided.</summary>
      <param name="content">The content value to negotiate and format in the entity body.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Content">
      <summary>Gets the content value to negotiate and format in the entity body.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.ContentNegotiator">
      <summary>Gets the content negotiator to handle content negotiation.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Formatters">
      <summary>Gets the formatters to use to negotiate and format the content.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Request">
      <summary>Gets the request message which led to this result.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkResult">
      <summary>Provides the web an HTTP request message ok results.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.OkResult" /> class.</summary>
      <param name="request">The HTTP request.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.NotFoundResult" /> class.</summary>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Executes asynchronously the HTTP results.</summary>
      <returns>Returns the task.</returns>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkResult.Request">
      <summary>Gets a HTTP request message for the results.</summary>
      <returns>A HTTP request message for the results.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ResponseMessageResult">
      <summary>Represents an action result that returns a specified response message.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> class.</summary>
      <param name="response">The response message.</param>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.ResponseMessageResult.Response">
      <summary>Gets the response message.</summary>
    </member>
    <member name="T:System.Web.Http.Results.StatusCodeResult">
      <summary>Represents an action result that returns a specified HTTP status code.</summary>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.StatusCodeResult" /> class.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.StatusCodeResult" /> class.</summary>
      <param name="statusCode">The HTTP status code for the response message.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Creates a response message asynchronously.</summary>
      <returns>A task that, when completed, contains the response message.</returns>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>The request message which led to this result.</returns>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.StatusCode">
      <summary>Gets the HTTP status code for the response message.</summary>
      <returns>The HTTP status code for the response message.</returns>
    </member>
    <member name="T:System.Web.Http.Results.UnauthorizedResult">
      <summary>Represents an action result that returns an <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> response. </summary>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Net.Http.HttpRequestMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Results.StatusCodeResult" /> class. </summary>
      <param name="challenges">The WWW-Authenticate challenges.</param>
      <param name="request">The request message which led to this result.</param>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Web.Http.ApiController)">
      <summary>Initializes a new instance of the<see cref="T:System.Web.Http.Results.StatusCodeResult" /> class. </summary>
      <param name="challenges">The WWW-Authenticate challenges.</param>
      <param name="controller">The controller from which to obtain the dependencies needed for execution.</param>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Challenges">
      <summary>Gets the WWW-Authenticate challenges.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Request">
      <summary>Gets the request message which led to this result.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultInlineConstraintResolver">
      <summary> The default implementation of <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />. Resolves constraints by parsing a constraint key and constraint arguments, using a map to resolve the constraint type, and calling an appropriate constructor for the constraint type. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.DefaultInlineConstraintResolver" /> class.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary> Gets the mutable dictionary that maps constraint keys to a particular constraint type. </summary>
      <returns>The mutable dictionary that maps constraint keys to a particular constraint type.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>Resolves the inline constraint.</summary>
      <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> the inline constraint was resolved to.</returns>
      <param name="inlineConstraint">The inline constraint to resolve.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpDirectRoute">
      <summary>Represents a route that is able to directly select the actions that can be reached.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpDirectRoute.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.ReflectedHttpActionDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.HttpDirectRoute" /> class. </summary>
      <param name="routeTemplate">The route template.</param>
      <param name="actions">The actions that are reachable via this route.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpDirectRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.ReflectedHttpActionDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.HttpDirectRoute" /> class. </summary>
      <param name="routeTemplate">The route template.</param>
      <param name="defaults">The default values.</param>
      <param name="constraints">The route constraints.</param>
      <param name="actions">The actions that are reachable via this route.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpDirectRoute.Actions">
      <summary>Gets the actions that are reachable via this route.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpDirectRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <returns>Returns <see cref="T:System.Web.Http.Routing.IHttpRouteData" />.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpMethodConstraint">
      <summary>Позволяет указать, какие HTTP-команды допускаются, когда при маршрутизации в ASP.NET определяется, соответствует ли URL-адрес маршруту.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.#ctor(System.Net.Http.HttpMethod[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpMethodConstraint" />, используя HTTP-команды, допустимые для маршрута.</summary>
      <param name="allowedMethods">HTTP-команды, допустимые для маршрута.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpMethodConstraint.AllowedMethods">
      <summary>Возвращает или задает коллекцию HTTP-команд для маршрута.</summary>
      <returns>Коллекция HTTP-команд для маршрута.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Определяет, был ли запрос сделан с использованием HTTP-команды, допустимой для маршрута.</summary>
      <returns>Когда ASP.NET маршрутизирует запрос, значение true, если запрос использует допустимую HTTP-команду. В противном случае — значение false. Когда ASP.NET создает URL-адрес при маршрутизации, значение true, если указанные значения допустимую HTTP-команду. В противном случае — значение false. Значение по умолчанию — true.</returns>
      <param name="request">Запрос, проверяемый на соответствие URL-адресу.</param>
      <param name="route">Объект, проверяемый на соответствие URL-адресу.</param>
      <param name="parameterName">Имя проверяемого параметра.</param>
      <param name="values">Объект, содержащий параметры для маршрута.</param>
      <param name="routeDirection">Объект, указывающий, выполняется ли проверка ограничений при обработке входящих запросов или создании URL-адресов.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.System#Web#Http#Routing#IHttpRouteConstraint#Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Определяет, был ли запрос сделан с использованием HTTP-команды, допустимой для маршрута.</summary>
      <returns>Когда ASP.NET маршрутизирует запрос, значение true, если запрос использует допустимую HTTP-команду. В противном случае — значение false. Когда ASP.NET создает URL-адрес при маршрутизации, значение true, если указанные значения допустимую HTTP-команду. В противном случае — значение false. Значение по умолчанию — true.</returns>
      <param name="request">Запрос, проверяемый на соответствие URL-адресу.</param>
      <param name="route">Объект, проверяемый на соответствие URL-адресу.</param>
      <param name="parameterName">Имя проверяемого параметра.</param>
      <param name="values">Объект, содержащий параметры для маршрута.</param>
      <param name="routeDirection">Объект, указывающий, выполняется ли проверка ограничений при обработке входящих запросов или создании URL-адресов.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRoute">
      <summary>Представляет класс маршрута для самостоятельного размещения (за пределами ASP.NET).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Шаблон маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Значения по умолчанию для параметров маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Значения по умолчанию для параметров маршрута.</param>
      <param name="constraints">Ограничения для параметров маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Значения по умолчанию для параметров маршрута.</param>
      <param name="constraints">Ограничения для параметров маршрута.</param>
      <param name="dataTokens">Дополнительные маркеры для параметров маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Значения по умолчанию для параметров маршрута.</param>
      <param name="constraints">Ограничения для параметров маршрута.</param>
      <param name="dataTokens">Дополнительные маркеры для параметров маршрута.</param>
      <param name="handler">Обработчик сообщений, который будет получателем запроса.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Constraints">
      <summary>Получает ограничения для параметров маршрута.</summary>
      <returns>Ограничения для параметров маршрута.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.DataTokens">
      <summary>Получает дополнительные маркеры данных, не используемые непосредственно для определения того, соответствует ли маршрут входящему <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Дополнительные маркеры данных, не используемые непосредственно для определения того, соответствует ли маршрут входящему <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Defaults">
      <summary>Получает значения по умолчанию для параметров маршрута, если они не заданы во входящем <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Значения по умолчанию для параметров маршрута, если они не заданы во входящем <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary>Определяет, соответствует ли данный маршрут входящему запросу, проверяя <see cref="T:System.Web.Http.Routing.HttpRouteData" /> для маршрута.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> для маршрута, если совпадение есть; иначе — null.</returns>
      <param name="virtualPathRoot">Корень виртуального пути.</param>
      <param name="request">HTTP-запрос.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Пытается создать URI, представляющий переданные значения на основе текущих значений из <see cref="T:System.Web.Http.Routing.HttpRouteData" /> и новых значений, с помощью указанного <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <returns>Экземпляр <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> или null, если URI невозможно создать.</returns>
      <param name="request">Сообщение запроса HTTP.</param>
      <param name="values">Значения маршрута.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Handler">
      <summary>Получает или задает обработчик маршрутов HTTP.</summary>
      <returns>Обработчик маршрутов HTTP.</returns>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey"></member>
    <member name="M:System.Web.Http.Routing.HttpRoute.ProcessConstraint(System.Net.Http.HttpRequestMessage,System.Object,System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Определяет, равен ли данный экземпляр указанному маршруту.</summary>
      <returns>Значение true, если данный экземпляр равен указанному маршруту; в противном случае — false.</returns>
      <param name="request">HTTP-запрос.</param>
      <param name="constraint">Ограничения для параметров маршрута.</param>
      <param name="parameterName">Имя параметра.</param>
      <param name="values">Список значений параметров.</param>
      <param name="routeDirection">Одно из значений перечисления <see cref="System.Web.Http.Routing.HttpRouteDirection" />.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.RouteTemplate">
      <summary>Получает шаблон маршрута, описывающий шаблон URI для сопоставления.</summary>
      <returns>Шаблон маршрута, описывающий шаблон URI для сопоставления.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteBuilder">
      <summary> Builds <see cref="T:System.Web.Http.Routing.IHttpRoute" /> instances based on route information. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteBuilder.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Web.Http.Routing.HttpRouteBuilder" /> class using the default inline constraint resolver. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteBuilder.#ctor(System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary> Initializes a new instance of the <see cref="T:System.Web.Http.Routing.HttpRouteBuilder" /> class. </summary>
      <param name="constraintResolver">The <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" /> to use for resolving inline constraints.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteBuilder.BuildHttpRoute(System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.ReflectedHttpActionDescriptor})"></member>
    <member name="M:System.Web.Http.Routing.HttpRouteBuilder.BuildHttpRoute(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Collections.Generic.IEnumerable{System.Web.Http.Controllers.ReflectedHttpActionDescriptor})"></member>
    <member name="P:System.Web.Http.Routing.HttpRouteBuilder.ConstraintResolver"></member>
    <member name="T:System.Web.Http.Routing.HttpRouteData">
      <summary>Инкапсулирует сведения об HTTP-маршруте.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Объект, который определяет маршрут.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Объект, который определяет маршрут.</param>
      <param name="values">Значение.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Route">
      <summary>Получает объект, который представляет маршрут.</summary>
      <returns>Объект, который представляет маршрут.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Values">
      <summary>Получает коллекцию значений параметров URL-адреса и значений по умолчанию для маршрута.</summary>
      <returns>Объект, который содержит значения, извлекаемые из URL-адреса и значений по умолчанию.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDirection">
      <summary>Задает перечисление для направлений маршрута.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriGeneration">
      <summary>Направление UriGeneration.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriResolution">
      <summary>Направление UriResolution.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteValueDictionary">
      <summary>Представляет класс маршрута для самостоятельного размещения указанных пар "ключ-значение".</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="dictionary">Словарь.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="values">Значение ключа.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpVirtualPathData">
      <summary>Представляет данные, касающиеся виртуального пути HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpVirtualPathData.#ctor(System.Web.Http.Routing.IHttpRoute,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" />.</summary>
      <param name="route">Маршрут виртуального пути.</param>
      <param name="virtualPath">URL-адрес, созданный по определению маршрута.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.Route">
      <summary>Получает или задает маршрут виртуального пути.</summary>
      <returns>Маршрут виртуального пути.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.VirtualPath">
      <summary>Получает или задает URL-адрес, созданный по определению маршрута.</summary>
      <returns>URL-адрес, созданный по определению маршрута.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRoute">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> определяет интерфейс для маршрута, выражая сопоставление входящего <see cref="T:System.Net.Http.HttpRequestMessage" /> с определенным контроллером и действием. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
      <summary> Получает ограничения для параметров маршрута. </summary>
      <returns>Ограничения для параметров маршрута.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
      <summary> Получает дополнительные маркеры данных, не используемые непосредственно для определения того, соответствует ли маршрут входящему <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Дополнительные маркеры данных.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
      <summary> Получает значения по умолчанию для параметров маршрута, если они не заданы во входящем <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Значения по умолчанию для параметров маршрута.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary> Определить, соответствует ли маршрут входящему запросу, можно, найдя &lt;see cref="!:IRouteData" /&gt; для маршрута. </summary>
      <returns>Значение &lt;see cref="!:RouteData" /&gt; для маршрута в случае совпадения, в противном случае — null.</returns>
      <param name="virtualPathRoot">Корень виртуального пути.</param>
      <param name="request">Запрос.</param>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Получает данные о виртуальном пути в зависимости от маршрута и заданных значений.</summary>
      <returns>Данные виртуального пути.</returns>
      <param name="request">Сообщение запроса.</param>
      <param name="values">Значения.</param>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
      <summary>Получает обработчик сообщений, который будет получателем запроса.</summary>
      <returns>Обработчик сообщений.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
      <summary> Получает шаблон маршрута, описывающий шаблон URI для сопоставления.  </summary>
      <returns>Шаблон маршрута.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteConstraint">
      <summary>Представляет базовый класс ограничения маршрута.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Определяет, равен ли данный экземпляр указанному маршруту.</summary>
      <returns>Значение true, если данный экземпляр равен указанному маршруту; в противном случае — false.</returns>
      <param name="request">Запрос.</param>
      <param name="route">Маршрут для сравнения.</param>
      <param name="parameterName">Имя параметра.</param>
      <param name="values">Список значений параметров.</param>
      <param name="routeDirection">Направление маршрута.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteData">
      <summary>Предоставляет информацию о маршруте.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Route">
      <summary>Получает объект, который представляет маршрут.</summary>
      <returns>Объект, который представляет маршрут.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Values">
      <summary>Получает коллекцию значений параметров URL-адреса и значений по умолчанию для маршрута.</summary>
      <returns>Значения, которые были получены из URL-адреса и значений по умолчанию.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteInfoProvider">
      <summary> Provides information for defining a route. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Name"></member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Order"></member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Template"></member>
    <member name="T:System.Web.Http.Routing.IHttpVirtualPathData">
      <summary>Определяет свойства для маршрута HTTP.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.Route">
      <summary>Получает маршрут HTTP.</summary>
      <returns>Маршрут HTTP.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.VirtualPath">
      <summary>Получает URI, представляющий виртуальный путь текущего маршрута HTTP.</summary>
      <returns>URI, представляющий виртуальный путь текущего маршрута HTTP.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IInlineConstraintResolver">
      <summary> Defines an abstraction for resolving inline constraints as instances of <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary> Resolves the inline constraint. </summary>
      <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> the inline constraint was resolved to.</returns>
      <param name="inlineConstraint">The inline constraint to resolve.</param>
    </member>
    <member name="T:System.Web.Http.Routing.UrlHelper">
      <summary>Представляет фабрику для создания URL-адресов. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.UrlHelper" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <param name="request">Запрос HTTP для экземпляра.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Content(System.String)"></member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Возвращает ссылку для заданного маршрута.</summary>
      <returns>Ссылка для заданного маршрута.</returns>
      <param name="routeName">Имя маршрута.</param>
      <param name="routeValues">Объект, содержащий параметры для маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Object)">
      <summary>Возвращает ссылку для заданного маршрута.</summary>
      <returns>Ссылка для заданного маршрута.</returns>
      <param name="routeName">Имя маршрута.</param>
      <param name="routeValues">Значение маршрута.</param>
    </member>
    <member name="P:System.Web.Http.Routing.UrlHelper.Request">
      <summary>Получает или задает HttpRequestMessage текущего экземпляра UrlHelper.</summary>
      <returns>HttpRequestMessage текущего экземпляра.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Возвращает маршрут для <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Маршрут для <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
      <param name="routeName">Имя маршрута.</param>
      <param name="routeValues">Список значений маршрута.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Object)">
      <summary>Возвращает маршрут для <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Маршрут для <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
      <param name="routeName">Имя маршрута.</param>
      <param name="routeValues">Значения маршрута.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint">
      <summary>Constrains a route parameter to contain only lowercase or uppercase letters A through Z in the English alphabet.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint" /> class.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint">
      <summary>Constrains a route parameter to represent only Boolean values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint" /> class.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint">
      <summary>Constrains a route by several child constraints.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Http.Routing.IHttpRouteConstraint})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint" /> class.</summary>
      <param name="constraints">The child constraints that must match for this constraint to match.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>Gets the child constraints that must match for this constraint to match.</summary>
      <returns>The child constraints that must match for this constraint to match.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint">
      <summary>Constrains a route parameter to represent only <see cref="T:System.DateTime" /> values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint" /> class.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route of direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint">
      <summary>Constrains a route parameter to represent only decimal values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint" /> class.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DoubleRouteConstraint">
      <summary>Constrains a route parameter to represent only 64-bit floating-point values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.FloatRouteConstraint">
      <summary>Constrains a route parameter to represent only 32-bit floating-point values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint">
      <summary>Constrains a route parameter to represent only <see cref="T:System.Guid" /> values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint" /> class.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.IntRouteConstraint">
      <summary>Constrains a route parameter to represent only 32-bit integer values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.IntRouteConstraint" /> class.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint">
      <summary>Constrains a route parameter to be a string of a given length or within a given range of lengths.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint" /> class that constrains a route parameter to be a string of a given length.</summary>
      <param name="minLength">The minimum length of the route parameter.</param>
      <param name="maxLength">The maximum length of the route parameter.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>Gets the length of the route parameter, if one is set.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>Gets the maximum length of the route parameter, if one is set.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>Gets the minimum length of the route parameter, if one is set.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LongRouteConstraint">
      <summary>Constrains a route parameter to represent only 64-bit integer values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>Constrains a route parameter to be a string with a maximum length.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint" /> class.</summary>
      <param name="maxLength">The maximum length.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>Gets the maximum length of the route parameter.</summary>
      <returns>The maximum length of the route parameter.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxRouteConstraint">
      <summary>Constrains a route parameter to be an integer with a maximum value.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>Gets the maximum value of the route parameter.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint">
      <summary>Constrains a route parameter to be a string with a maximum length.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint" /> class.</summary>
      <param name="minLength">The minimum length.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>Gets the minimum length of the route parameter.</summary>
      <returns>The minimum length of the route parameter.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinRouteConstraint">
      <summary>Constrains a route parameter to be a long with a minimum value.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.MinRouteConstraint" /> class.</summary>
      <param name="min">The minimum value of the route parameter.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinRouteConstraint.Min">
      <summary>Gets the minimum value of the route parameter.</summary>
      <returns>The minimum value of the route parameter.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint">
      <summary>Constrains a route by an inner constraint that doesn't fail when an optional parameter is set to its default value.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Http.Routing.IHttpRouteConstraint)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint" /> class.</summary>
      <param name="innerConstraint">The inner constraint to match if the parameter is not an optional parameter without a value</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>Gets the inner constraint to match if the parameter is not an optional parameter without a value.</summary>
      <returns>The inner constraint to match if the parameter is not an optional parameter without a value.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint">
      <summary>Constraints a route parameter to be an integer within a given range of values.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint" /> class.</summary>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>Gets the maximum value of the route parameter.</summary>
      <returns>The maximum value of the route parameter.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>Gets the minimum value of the route parameter.</summary>
      <returns>The minimum value of the route parameter.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint">
      <summary>Constrains a route parameter to match a regular expression.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint" /> class.</summary>
      <param name="pattern">The pattern.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Determines whether this instance equals a specified route.</summary>
      <returns>true if this instance equals a specified route; otherwise, false.</returns>
      <param name="request">The request.</param>
      <param name="route">The route to compare.</param>
      <param name="parameterName">The name of the parameter.</param>
      <param name="values">A list of parameter values.</param>
      <param name="routeDirection">The route direction.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>Gets the regular expression pattern to match.</summary>
      <returns>The regular expression pattern to match.</returns>
    </member>
    <member name="T:System.Web.Http.Services.Decorator">
      <summary> Provides a method for retrieving the innermost object of an object that might be wrapped by an &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
    </member>
    <member name="M:System.Web.Http.Services.Decorator.GetInner``1(``0)">
      <summary> Gets the innermost object which does not implement &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
      <param name="outer">Object which needs to be unwrapped.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.Services.DefaultServices">
      <summary>Представляет контейнер для экземпляров служб, используемых <see cref="T:System.Web.Http.HttpConfiguration" />.Обратите внимание, что этот контейнер поддерживает только известные типы, и методы для получения или задания произвольных типов служб будет порождать <see cref="T:System.ArgumentException" /> при вызове.Для создания произвольных типов используйте тип <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />.Поддерживаемые типы для этого контейнера:        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /><see cref="T:System.Web.Http.Description.IApiExplorer" /><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /><see cref="T:System.Web.Http.Validation.IBodyModelValidator" /><see cref="T:System.Net.Http.Formatting.IContentNegotiator" /><see cref="T:System.Web.Http.Description.IDocumentationProvider" /><see cref="T:System.Web.Http.Filters.IFilterProvider" /><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /><see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /><see cref="T:System.Web.Http.Tracing.ITraceManager" /><see cref="T:System.Web.Http.Tracing.ITraceWriter" /><see cref="T:System.Web.Http.Query.IStructuredQueryBuilder" /><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /><see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />Передача типа, не указанного в списке, методам интерфейса приведет к исключению <see cref="T:System.ArgumentException" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Services.DefaultServices" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Services.DefaultServices" /> указанным объектом <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <param name="configuration">Объект <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ClearSingle(System.Type)">
      <summary>Удаляет службу с одиночным экземпляром из служб по умолчанию.</summary>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
      <summary>Получает службу указанного типа.</summary>
      <returns>Первый экземпляр службы или NULL, если служба не найдена.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServiceInstances(System.Type)">
      <summary>Получает список объектов служб указанного типа и проверяет тип службы.</summary>
      <returns>Список объектов служб указанного типа.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
      <summary>Получает список объектов служб указанного типа.</summary>
      <returns>Список объектов служб указанного типа (может быть пустым, если службы не найдены).</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.IsSingleService(System.Type)">
      <summary>Проверяет, одноэкземплярный ли это тип службы.</summary>
      <returns>Значение true, если тип службы допускает наличие не более одного экземпляра, или false, если он поддерживает наличие нескольких экземпляров.</returns>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Заменяет объект службы с одиночным экземпляром.</summary>
      <param name="serviceType">Тип службы.</param>
      <param name="service">Объект службы, заменяющий предыдущий экземпляр.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ResetCache(System.Type)">
      <summary>Удаляет кэшированные значения для типа с одной службой.</summary>
      <param name="serviceType">Тип службы.</param>
    </member>
    <member name="T:System.Web.Http.Services.IDecorator`1">
      <summary> Defines a decorator that exposes the inner decorated object. </summary>
      <typeparam name="T">Этот параметр типа ковариантен.
				Это означает, что можно использовать либо указанный тип, либо любой тип, производный от него.
				Дополнительные сведения о ковариации и контравариантности см. в разделе .</typeparam>
    </member>
    <member name="P:System.Web.Http.Services.IDecorator`1.Inner">
      <summary> Gets the inner object. </summary>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceManager">
      <summary>Представляет класс для трассировки производительности, позволяющий отслеживать вход и выход в методах, а также из продолжительность.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceManager.Initialize(System.Web.Http.HttpConfiguration)">
      <summary>Инициализирует класс <see cref="T:System.Web.Http.Tracing.ITraceManager" /> с заданной конфигурацией.</summary>
      <param name="configuration">Конфигурация.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriter">
      <summary>Представляет модуль записи трассировки.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Вызывает заданное действие traceAction, чтобы разрешить задавать значения в новом <see cref="T:System.Web.Http.Tracing.TraceRecord" />, в том и только том случае, если трассировка разрешена для данных категории и уровня. </summary>
      <param name="request">Текущий <see cref="T:System.Net.Http.HttpRequestMessage" />.Это может быть null, но такое значение помешает провести последующий анализ трассировки от корреляции трассировки до конкретного запроса.</param>
      <param name="category">Логическая категория для трассировки.Пользователи могут определять свои собственные категории.</param>
      <param name="level">Уровень <see cref="T:System.Web.Http.Tracing.TraceLevel" /> на котором записывается трассировка.</param>
      <param name="traceAction">Действие, которое будет вызываться, если трассировка включена.Вызывающий объект должен заполнить поля данного <see cref="T:System.Web.Http.Tracing.TraceRecord" /> в этом действии.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
      <summary>Представляет методы расширения для <see cref="T:System.Web.Http.Tracing.ITraceWriter" />. </summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Предоставляет набор методов и свойств, помогающих при отладке кода с указанным модулем записи, запросом, категорией и исключением.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Предоставляет набор методов и свойств, помогающих при отладке кода с указанным модулем записи, запросом, категорией, исключением, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Предоставляет набор методов и свойств, помогающих при отладке кода с указанным модулем записи, запросом, категорией, исключением, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Отображает сообщение об ошибке в списке с указанным модулем записи, запросом, категорией и исключением.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Отображает сообщение об ошибке в списке с указанным модулем записи, запросом, категорией, исключением, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Исключение.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент в сообщении.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Отображает сообщение об ошибке в списке с указанным модулем записи, запросом, категорией, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент в сообщении.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Отображает сообщение об ошибке в классе <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> с указанным модулем записи, запросом, категорией и исключением.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Исключение, которое появляется во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Отображает сообщение об ошибке в классе <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> с указанным модулем записи, запросом, категорией, исключением, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Исключение.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Отображает сообщение об ошибке в классе <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> с указанным модулем записи, запросом, категорией, форматом сообщения и аргументом.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Отображает сведения в <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Отображает сведения в <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Отображает сведения в <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
      <summary>Указывает прослушиватели трассировки в коллекции Listeners.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">Уровень трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
      <summary>Указывает прослушиватели трассировки в коллекции Listeners.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">Уровень трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
      <summary>Указывает прослушиватели трассировки в коллекции Listeners.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary>Трассирует начальную и конечную трассировку вокруг указанной операции.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> для трассировки.</param>
      <param name="operatorName">Имя объекта, выполняющего операцию.Значение может быть равно null.</param>
      <param name="operationName">Имя выполняемой операции.Значение может быть равно null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" />, вызываемое до выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt;, возвращающая <see cref="T:System.Threading.Tasks.Task" />, которая выполнит операцию.</param>
      <param name="endTrace">
        <see cref="T:System.Action" />, вызываемое после успешного выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" />, вызываемое при ошибке в ходе выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Трассирует начальную и конечную трассировку вокруг указанной операции. </summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task" />, возвращаемый операцией.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> для трассировки.</param>
      <param name="operatorName">Имя объекта, выполняющего операцию.Значение может быть равно null.</param>
      <param name="operationName">Имя выполняемой операции.Значение может быть равно null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" />, вызываемое до выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt;, возвращающая <see cref="T:System.Threading.Tasks.Task" />, которая выполнит операцию.</param>
      <param name="endTrace">
        <see cref="T:System.Action" />, вызываемое после успешного выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Результат выполнения задачи также передается в это действие.Действие может иметь значение null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" />, вызываемое при ошибке в ходе выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <typeparam name="TResult">Тип результата <see cref="T:System.Threading.Tasks.Task" />.</typeparam>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Трассирует начальную и конечную трассировку вокруг указанной операции. </summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task" />, возвращаемый операцией.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="level">
        <see cref="T:System.Web.Http.Tracing.TraceLevel" /> для трассировки.</param>
      <param name="operatorName">Имя объекта, выполняющего операцию.Значение может быть равно null.</param>
      <param name="operationName">Имя выполняемой операции.Значение может быть равно null.</param>
      <param name="beginTrace">
        <see cref="T:System.Action" />, вызываемое до выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <param name="execute">&lt;see cref="T:System.Func`1" /&gt;, возвращающая <see cref="T:System.Threading.Tasks.Task" />, которая выполнит операцию.</param>
      <param name="endTrace">
        <see cref="T:System.Action" />, вызываемое после успешного выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
      <param name="errorTrace">
        <see cref="T:System.Action" />, вызываемое при ошибке в ходе выполнения операции, что позволяет заполнить данную <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Значение может быть равно null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Указывает уровень предупреждения при выполнении.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Указывает уровень предупреждения при выполнении.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="exception">Произошла ошибка во время выполнения.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Указывает уровень предупреждения при выполнении.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" />, с которым требуется связать трассировку.Значение может быть равно null.</param>
      <param name="category">Логическая категория для трассировки.</param>
      <param name="messageFormat">Формат сообщения.</param>
      <param name="messageArguments">Аргумент сообщения.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceCategories">
      <summary>Задает перечисление категорий трассировки.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ActionCategory">
      <summary>Категория действий.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ControllersCategory">
      <summary>Категория контроллеров.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FiltersCategory">
      <summary>Категория фильтров.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FormattingCategory">
      <summary>Категория форматирования.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.MessageHandlersCategory">
      <summary>Категория обработчиков сообщений.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ModelBindingCategory">
      <summary>Категория привязок модели.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RequestCategory">
      <summary>Категория запросов.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RoutingCategory">
      <summary>Категория маршрутизации.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceKind">
      <summary>Задает вид операции трассировки.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
      <summary>Трассировка, отмечающая начало операции.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.End">
      <summary>Трассировка, отмечающая конец операции.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
      <summary>Одиночная трассировка, не является частью пары трассировки "Begin/End".</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceLevel">
      <summary>Задает перечисление уровней трассировки.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
      <summary>Уровень трассировки для отладочной трассировки.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
      <summary>Уровень трассировки для трассировки ошибок.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
      <summary>Уровень трассировки для трассировки неустранимых ошибок.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
      <summary>Уровень трассировки для информационной трассировки.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
      <summary>Трассировка отключена.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
      <summary>Уровень трассировки для трассировки предупреждений.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceRecord">
      <summary>Представляет запись трассировки.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.TraceRecord.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Tracing.TraceRecord" />.</summary>
      <param name="request">Запрос сообщения.</param>
      <param name="category">Категория трассировки.</param>
      <param name="level">Уровень трассировки.</param>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
      <summary>Возвращает или задает категорию трассировки.</summary>
      <returns>Категория трассировки.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
      <summary>Возвращает или задает исключение.</summary>
      <returns>Исключение.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
      <summary>Возвращает или задает тип трассировки.</summary>
      <returns>Вид трассировки.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
      <summary>Возвращает или задает уровень трассировки.</summary>
      <returns>Уровень трассировки.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
      <summary>Возвращает или задает сообщение.</summary>
      <returns>Сообщение.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
      <summary>Возвращает или задает имя выполняемой логической операции.</summary>
      <returns>Имя выполняемой логической операции.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
      <summary>Возвращает или задает логическое имя объекта, выполняющего операцию.</summary>
      <returns>Логическое имя объекта, выполняющего операцию.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
      <summary>Возвращает необязательные определяемые пользователем свойства.</summary>
      <returns>Необязательные определяемые пользователем свойства.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
      <summary>Получает <see cref="T:System.Net.Http.HttpRequestMessage" /> из записи.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> из записи.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
      <summary>Получает идентификатор корреляции из <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />.</summary>
      <returns>Идентификатор корреляции из <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
      <summary>Возвращает или задает <see cref="T:System.Net.HttpStatusCode" />, связанный с <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" />, связанный с <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
      <summary>Получает <see cref="T:System.DateTime" /> этой трассировки (через <see cref="P:System.DateTime.UtcNow" />).</summary>
      <returns>
        <see cref="T:System.DateTime" /> этой трассировки (через <see cref="P:System.DateTime.UtcNow" />).</returns>
    </member>
    <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
      <summary>Рекурсивно проверяет объект.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.DefaultBodyModelValidator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.ShouldValidateType(System.Type)">
      <summary>Определяет, необходима ли проверка экземпляров определенного типа.</summary>
      <returns>Значение true, если тип проверяется. В противном случае — значение false.</returns>
      <param name="type">Тип для проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>Определяет, допустима ли модель, и добавляет все ошибки проверки в ModelStateDictionary для actionContext.</summary>
      <returns>Значение true, если модель допустима. В противном случае — значение false.</returns>
      <param name="model">Проверяемая модель.</param>
      <param name="type">Тип, используемый для проверки.</param>
      <param name="metadataProvider">Поставщик метаданных, используемый для предоставления метаданных модели.</param>
      <param name="actionContext">HttpActionContext, в рамках которого проверяется модель.</param>
      <param name="keyPrefix">Значение String, добавляемое к ключу для всех ошибок проверки.</param>
    </member>
    <member name="T:System.Web.Http.Validation.IBodyModelValidator">
      <summary>Представляет интерфейс для проверки моделей.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary> Определяет, допустима ли модель, и добавляет все ошибки проверки к <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> в actionContext.</summary>
      <returns>Значение true, если модель допустима; в противном случае — false.</returns>
      <param name="model">Проверяемая модель.</param>
      <param name="type">
        <see cref="T:System.Type" />, используемый для проверки.</param>
      <param name="metadataProvider">
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />, используемый для предоставления метаданных модели.</param>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" />, в рамках которого проверяется модель.</param>
      <param name="keyPrefix">
        <see cref="T:System.String" /> для добавления к ключу для всех ошибок проверки.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
      <summary>Этот <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> заносит в журнал ошибки модулей форматирования для указанного <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelStateFormatterLogger" />.</summary>
      <param name="modelState">Состояние модели.</param>
      <param name="prefix">Префикс.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Заносит в журнал указанную ошибку модели.</summary>
      <param name="errorPath">Ошибка пути.</param>
      <param name="exception">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.String)">
      <summary>Заносит в журнал указанную ошибку модели.</summary>
      <param name="errorPath">Ошибка пути.</param>
      <param name="errorMessage">Сообщение об ошибке.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatedEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validated" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatedEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidatedEventArgs" />.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="parentNode">Родительский узел.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ActionContext">
      <summary>Возвращает или задает контекст действия.</summary>
      <returns>Контекст для действия.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ParentNode">
      <summary>Возвращает или задает родительский узел.</summary>
      <returns>Родительский узел.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatingEventArgs">
      <summary>Предоставляет данные для события <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validating" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatingEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidatingEventArgs" />.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="parentNode">Родительский узел.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ActionContext">
      <summary>Возвращает или задает контекст действия.</summary>
      <returns>Контекст для действия.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ParentNode">
      <summary>Возвращает или задает родительский узел.</summary>
      <returns>Родительский узел.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationNode">
      <summary>Предоставляет контейнер для сведений о проверке модели.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidationNode" />, используя указанные метаданные модели и ключ состояния.</summary>
      <param name="modelMetadata">Метаданные модели.</param>
      <param name="modelStateKey">Ключ состояния модели.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidationNode})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidationNode" />, используя указанные метаданные модели, ключ состояния модели и дочерние узлы проверки модели.</summary>
      <param name="modelMetadata">Метаданные модели.</param>
      <param name="modelStateKey">Ключ состояния модели.</param>
      <param name="childNodes">Дочерние узлы модели.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ChildNodes">
      <summary>Возвращает или задает дочерние узлы.</summary>
      <returns>Дочерние узлы.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.CombineWith(System.Web.Http.Validation.ModelValidationNode)">
      <summary>Сочетает текущий экземпляр <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> с указанным экземпляром <see cref="T:System.Web.Http.Validation.ModelValidationNode" />.</summary>
      <param name="otherNode">Узел проверки модели, сочетаемый с текущим экземпляром.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelMetadata">
      <summary>Возвращает или задает метаданные модели.</summary>
      <returns>Метаданные модели.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelStateKey">
      <summary>Возвращает или задает ключ состояния модели.</summary>
      <returns>Ключ состояния модели.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.SuppressValidation">
      <summary>Возвращает или задает значение, указывающее, следует ли подавлять проверку.</summary>
      <returns>Значение true, если проверка подавляется. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Проверяет модель, используя указанный контекст выполнения.</summary>
      <param name="actionContext">Контекст действия.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Проверяет модель, используя указанные контекст выполнения и родительский узел.</summary>
      <param name="actionContext">Контекст действия.</param>
      <param name="parentNode">Родительский узел.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ValidateAllProperties">
      <summary>Возвращает или задает значение, указывающее, все ли свойства модели проверяются.</summary>
      <returns>Значение true, если проверяются все свойства. В противном случае — значение false.</returns>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validated">
      <summary>Происходит после проверки модели.</summary>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validating">
      <summary>Происходит при проверке модели.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
      <summary>Представляет выборку обязательных членов, проверяя обязательные ModelValidator, связанные с ними.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector" />.</summary>
      <param name="metadataProvider">Поставщик метаданных.</param>
      <param name="validatorProviders">Поставщики проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Указывает, необходим ли член для проверки.</summary>
      <returns>Значение true, если член необходим для проверки; в противном случае — значение false.</returns>
      <param name="member">Член.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationResult">
      <summary>Предоставляет контейнер для результата проверки.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationResult.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidationResult" />.</summary>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.MemberName">
      <summary>Возвращает или задает имя элемента.</summary>
      <returns>Имя элемента.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.Message">
      <summary>Возвращает или задает сообщение о результате проверки.</summary>
      <returns>Сообщение о результате проверки.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidator">
      <summary>Предоставляет базовый класс для реализации логики проверки.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidator" />.</summary>
      <param name="validatorProviders">Поставщики проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.GetModelValidator(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Возвращает проверяющий составной элемент управления для модели.</summary>
      <returns>Проверяющий составной элемент управления для модели.</returns>
      <param name="validatorProviders">Перечисление поставщиков проверки.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.IsRequired">
      <summary>Возвращает значение, указывающее, является ли свойство модели обязательным.</summary>
      <returns>Значение true, если свойство модели является обязательным. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Проверяет указанный объект.</summary>
      <returns>Список результатов проверки.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="container">Контейнер.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.ValidatorProviders">
      <summary>Получает или задает перечисление поставщиков проверки.</summary>
      <returns>Перечисление поставщиков проверки.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatorProvider">
      <summary>Предоставляет список проверяющих элементов управления для модели.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Получает список проверяющих элементов управления, связанных с этим <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Список проверяющих элементов управления.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Поставщики проверки.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider">
      <summary>Предоставляет абстрактный класс для классов, реализующих поставщик проверки.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Возвращает дескриптор типа для заданного типа.</summary>
      <returns>Дескриптор типа для указанного типа.</returns>
      <param name="type">Тип поставщика проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Получает проверяющие элементы управления для модели, используя метаданные и поставщики проверки.</summary>
      <returns>Проверяющие элементы управления для модели.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Перечисление поставщиков проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Получает проверяющие элементы управления для модели, используя метаданные, поставщики проверки и список атрибутов.</summary>
      <returns>Проверяющие элементы управления для модели.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Перечисление поставщиков проверки.</param>
      <param name="attributes">Список атрибутов.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory">
      <summary>Представляет метод, создающий экземпляр <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
      <summary>Представляет реализацию <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />, предоставляющую проверяющие элементы управления для атрибутов, производных от <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />. Также содержит проверяющий элемент управления для типов, реализующих <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Для поддержки проверки на стороне клиента можно регистрировать адаптеры через статические методы класса или реализовать в атрибутах проверки <see cref="T:System.Web.Http.Validation.IClientValidatable" />. Логика поддержки IClientValidatable реализована в <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Получает проверяющие элементы управления для модели, используя указанные метаданные, поставщики проверки и атрибуты.</summary>
      <returns>Проверяющие элементы управления для модели.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Поставщики проверки.</param>
      <param name="attributes">Атрибуты.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Регистрирует адаптер для предоставления проверки на стороне клиента.</summary>
      <param name="attributeType">Тип атрибута проверки.</param>
      <param name="adapterType">Тип адаптера.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Регистрирует фабрику адаптеров для поставщика проверки.</summary>
      <param name="attributeType">Тип атрибута.</param>
      <param name="factory">Фабрика, которая будет использоваться при создании объекта <see cref="T:System.Web.Http.Validation.ModelValidator" /> для заданного атрибута.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Регистрирует адаптер по умолчанию.</summary>
      <param name="adapterType">Тип адаптера.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Регистрирует фабрику адаптеров по умолчанию.</summary>
      <param name="factory">Фабрика, которая будет использоваться при создании объекта <see cref="T:System.Web.Http.Validation.ModelValidator" /> для адаптера по умолчанию.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>Регистрирует тип адаптера по умолчанию для объектов, реализующих <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Тип адаптера должен быть производным <see cref="T:System.Web.Http.Validation.ModelValidator" /> и содержать открытый конструктор, принимающий два параметра типов <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> и <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="adapterType">Тип адаптера.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Регистрирует тип фабрику адаптеров по умолчанию для объектов, реализующих <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="factory">Фабрика.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>Регистрирует тип адаптера для указанного modelType, который должен реализовывать <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Тип адаптера должен быть производным <see cref="T:System.Web.Http.Validation.ModelValidator" /> и содержать открытый конструктор, принимающий два параметра типов <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> и <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="modelType">Тип модели.</param>
      <param name="adapterType">Тип адаптера.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Регистрирует фабрику адаптеров для указанного modelType, который должен реализовывать <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="modelType">Тип модели.</param>
      <param name="factory">Фабрика.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>Предоставляет фабрику для проверяющих элементов управления на основе <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
      <summary>Представляет поставщик проверки для модели членов данных.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Получает проверяющие элементы управления для модели.</summary>
      <returns>Проверяющие элементы управления для модели.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Перечислитель поставщиков проверки.</param>
      <param name="attributes">Список атрибутов.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
      <summary>Реализация <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />, предоставляющая проверяющие элементы управления, которые порождают исключения, если модель недопустима.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Получает список проверяющих элементов управления, связанных с этим <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
      <returns>Список проверяющих элементов управления.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Поставщики проверки.</param>
      <param name="attributes">Список атрибутов.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider">
      <summary>Предоставляет поставщик для проверяющего элемента управления модели обязательных членов.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.#ctor(System.Net.Http.Formatting.IRequiredMemberSelector)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider" />.</summary>
      <param name="requiredMemberSelector">Селектор обязательных членов.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Получает проверяющий элемент управления для модели членов.</summary>
      <returns>Проверяющий элемент управления для модели членов.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="validatorProviders">Поставщики проверки.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator">
      <summary>Предоставляет проверяющий элемент управления модели.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />.</summary>
      <param name="validatorProviders">Поставщики проверки.</param>
      <param name="attribute">Атрибут проверки для модели.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Attribute">
      <summary>Возвращает или задает атрибут проверки для проверяющего элемента управления модели.</summary>
      <returns>Атрибут проверки для проверяющего элемента управления модели.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.IsRequired">
      <summary>Получает значение, указывающее, является ли проверка модели обязательной.</summary>
      <returns>Значение true, если проверка модели является обязательной. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Проверяет модель и возвращает ошибки, если они найдены.</summary>
      <returns>Список сообщений об ошибках проверки для модели или пустой список, если ошибок не было.</returns>
      <param name="metadata">Метаданные модели.</param>
      <param name="container">Контейнер для модели.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidator" /> для представления ошибки.Этот проверяющий элемент управления всегда порождает исключение вне зависимости от фактического значения модели.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Validators.ErrorModelValidator" />.</summary>
      <param name="validatorProviders">Список поставщиков проверки модели.</param>
      <param name="errorMessage">Сообщение об ошибке для исключения.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Проверяет указанный объект.</summary>
      <returns>Список результатов проверки.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="container">Контейнер.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
      <summary>Представляет <see cref="T:System.Web.Http.Validation.ModelValidator" /> для обязательных членов. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator" />.</summary>
      <param name="validatorProviders">Поставщики проверки.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.IsRequired">
      <summary>Получает или задает значение, указывающее модулю сериализации, что член должен присутствовать при проверке.</summary>
      <returns>Значение true, если член необходим. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Проверяет объект.</summary>
      <returns>Список результатов проверки.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="container">Контейнер.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter">
      <summary>Предоставляет адаптер объекта, который можно проверить.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter" />.</summary>
      <param name="validatorProviders">Поставщик проверки.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Проверяет указанный объект.</summary>
      <returns>Список результатов проверки.</returns>
      <param name="metadata">Метаданные.</param>
      <param name="container">Контейнер.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IEnumerableValueProvider">
      <summary>Представляет базовый класс для поставщиков значений, значения которых берутся из коллекции, реализующей интерфейс <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Извлекает ключи из указанного <paramref name="prefix" />.</summary>
      <returns>Ключи из указанного <paramref name="prefix" />.</returns>
      <param name="prefix">Префикс.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IValueProvider">
      <summary>Определяет методы, которые требуются поставщику значений в MVC ASP.NET.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.ContainsPrefix(System.String)">
      <summary>Определяет, содержит ли коллекция указанный префикс.</summary>
      <returns>Значение true, если коллекция содержит заданный префикс. В противном случае — значение false.</returns>
      <param name="prefix">Искомый префикс.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.GetValue(System.String)">
      <summary>Извлекает объект значения, используя указанный ключ.</summary>
      <returns>Объект значения для заданного ключа.</returns>
      <param name="key">Ключ извлекаемого объекта значения.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
      <summary> Этот атрибут используется для указания настраиваемого <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />. </summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactory">Тип связывателя модели.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactories">Массив типов связывателей модели.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Получает фабрики поставщиков значений.</summary>
      <returns>Коллекция фабрик поставщиков значений.</returns>
      <param name="configuration">Объект конфигурации.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderAttribute.ValueProviderFactoryTypes">
      <summary>Получает типы объектов, возвращаемых фабрикой поставщиков значений.</summary>
      <returns>Коллекция типов.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderFactory">
      <summary>Представляет фабрику для создания объектов поставщиков значений.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Возвращает объект поставщика значения для заданного контекста контроллера.</summary>
      <returns>Объект поставщика значения.</returns>
      <param name="actionContext">Объект, инкапсулирующий сведения о текущем HTTP-запросе.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderResult">
      <summary>Представляет результат привязки значения (например, из данных отправки формы или строки запроса) к свойству аргумента метода действия или к самому аргументу.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
      <param name="rawValue">Необработанное значение.</param>
      <param name="attemptedValue">Значение попытки.</param>
      <param name="culture">Язык и региональные параметры.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.AttemptedValue">
      <summary>Получает или задает необработанное значение, которое преобразуется в строку для отображения.</summary>
      <returns>Необработанное значение, которое преобразуется в строку для отображения.</returns>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Преобразует значение, которое инкапсулируется этим результатом, в указанный тип.</summary>
      <returns>Преобразованное значение.</returns>
      <param name="type">Тип целевого объекта.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Преобразует значение, которое инкапсулируется этим результатом, в указанный тип, используя заданные сведения о языке и региональных параметрах.</summary>
      <returns>Преобразованное значение.</returns>
      <param name="type">Тип целевого объекта.</param>
      <param name="culture">Язык и региональные параметры, используемые при преобразовании.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.Culture">
      <summary>Получает или задает язык и региональные параметры.</summary>
      <returns>Язык и региональные параметры.</returns>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.RawValue">
      <summary>Получает или задает необработанное значение, предоставляемое поставщиком значений.</summary>
      <returns>Необработанное значение, предоставляемое поставщиком значений.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider">
      <summary>Представляет поставщик значений, чьи значения берутся из списка поставщиков значений, которые реализуют интерфейс <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor(System.Collections.Generic.IList{System.Web.Http.ValueProviders.IValueProvider})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
      <param name="list">Список поставщиков значений.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.ContainsPrefix(System.String)">
      <summary>Определяет, содержит ли коллекция указанный <paramref name="prefix" />.</summary>
      <returns>Значение true, если коллекция содержит заданный <paramref name="prefix" />. В противном случае — значение false.</returns>
      <param name="prefix">Искомый префикс.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Извлекает ключи из указанного <paramref name="prefix" />.</summary>
      <returns>Ключи из указанного <paramref name="prefix" />.</returns>
      <param name="prefix">Префикс, из которого берутся ключи.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetValue(System.String)">
      <summary>Извлекает объект значения, используя указанный <paramref name="key" />.</summary>
      <returns>Объект значения для заданного <paramref name="key" />.</returns>
      <param name="key">Ключ извлекаемого объекта значения.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.InsertItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс (с нуля), по которому следует вставить значение параметра <paramref name="item" />.</param>
      <param name="item">Объект, который нужно вставить.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.SetItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Заменяет элемент по указанному индексу.</summary>
      <param name="index">Индекс (с нуля) элемента, который требуется заменить.</param>
      <param name="item">Новое значение элемента по указанному индексу.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory">
      <summary>Представляет фабрику для создания списка объектов поставщиков значений.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory" />.</summary>
      <param name="factories">Коллекция фабрик поставщиков значений.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Извлекает список объектов поставщиков значений для заданного контекста контроллера.</summary>
      <returns>Список объектов поставщиков значений для заданного контекста контроллера.</returns>
      <param name="actionContext">Объект, инкапсулирующий сведения о текущем HTTP-запросе.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider">
      <summary>Поставщик значений для пар "имя-значение".</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" />.</summary>
      <param name="values">Пары "имя-значение" для поставщика.</param>
      <param name="culture">Язык и региональные параметры, используемые для пар "имя-значение".</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" />, используя делегат-функцию предоставления пар "имя-значение".</summary>
      <param name="valuesFactory">Делегат-функция, который возвращает коллекцию пар "имя-значение".</param>
      <param name="culture">Язык и региональные параметры, используемые для пар "имя-значение".</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.ContainsPrefix(System.String)">
      <summary>Определяет, содержит ли коллекция указанный префикс.</summary>
      <returns>Значение true, если коллекция содержит заданный префикс. В противном случае — значение false.</returns>
      <param name="prefix">Искомый префикс.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Получает ключи из префикса.</summary>
      <returns>Ключи.</returns>
      <param name="prefix">Префикс.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetValue(System.String)">
      <summary>Извлекает объект значения, используя указанный ключ.</summary>
      <returns>Объект значения для заданного ключа.</returns>
      <param name="key">Ключ извлекаемого объекта значения.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider">
      <summary>Представляет поставщик значений для строк запроса, содержащихся в объекте <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider" />.</summary>
      <param name="actionContext">Объект, инкапсулирующий сведения о текущем HTTP-запросе.</param>
      <param name="culture">Объект, содержащий сведения о целевых языке и региональных параметрах.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory">
      <summary>Представляет класс, ответственный за создание нового экземпляра объекта поставщика значения строки запроса.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Извлекает объект поставщика значений для заданного контекста контроллера.</summary>
      <returns>Объект поставщика значения строки запроса.</returns>
      <param name="actionContext">Объект, инкапсулирующий сведения о текущем HTTP-запросе.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider">
      <summary>Представляет поставщик значений для данных маршрута, содержащихся в объекте, который реализует интерфейс IDictionary(Of TKey, TValue).</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider" />.</summary>
      <param name="actionContext">Объект, содержащий сведения об HTTP-запросе.</param>
      <param name="culture">Объект, содержащий сведения о целевых языке и региональных параметрах.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory">
      <summary>Представляет фабрику для создания объектов поставщиков значений данных маршрутов.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Извлекает объект поставщика значений для заданного контекста контроллера.</summary>
      <returns>Объект поставщика значения.</returns>
      <param name="actionContext">Объект, инкапсулирующий сведения о текущем HTTP-запросе.</param>
    </member>
  </members>
</doc>